// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwww/hrm-ms-permission/ent/perm"
	"github.com/longgggwww/hrm-ms-permission/ent/permgroup"
	"github.com/longgggwww/hrm-ms-permission/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePerm      = "Perm"
	TypePermGroup = "PermGroup"
)

// PermMutation represents an operation that mutates the Perm nodes in the graph.
type PermMutation struct {
	config
	op            Op
	typ           string
	id            *int
	code          *string
	name          *string
	description   *string
	clearedFields map[string]struct{}
	group         *int
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*Perm, error)
	predicates    []predicate.Perm
}

var _ ent.Mutation = (*PermMutation)(nil)

// permOption allows management of the mutation configuration using functional options.
type permOption func(*PermMutation)

// newPermMutation creates new mutation for the Perm entity.
func newPermMutation(c config, op Op, opts ...permOption) *PermMutation {
	m := &PermMutation{
		config:        c,
		op:            op,
		typ:           TypePerm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermID sets the ID field of the mutation.
func withPermID(id int) permOption {
	return func(m *PermMutation) {
		var (
			err   error
			once  sync.Once
			value *Perm
		)
		m.oldValue = func(ctx context.Context) (*Perm, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Perm.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerm sets the old Perm of the mutation.
func withPerm(node *Perm) permOption {
	return func(m *PermMutation) {
		m.oldValue = func(context.Context) (*Perm, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Perm.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *PermMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PermMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PermMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *PermMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PermMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PermMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PermMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PermMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Perm entity.
// If the Perm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PermMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[perm.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PermMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[perm.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PermMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, perm.FieldDescription)
}

// SetGroupID sets the "group" edge to the PermGroup entity by id.
func (m *PermMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the PermGroup entity.
func (m *PermMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the PermGroup entity was cleared.
func (m *PermMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *PermMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *PermMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *PermMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the PermMutation builder.
func (m *PermMutation) Where(ps ...predicate.Perm) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Perm, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Perm).
func (m *PermMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.code != nil {
		fields = append(fields, perm.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, perm.FieldName)
	}
	if m.description != nil {
		fields = append(fields, perm.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case perm.FieldCode:
		return m.Code()
	case perm.FieldName:
		return m.Name()
	case perm.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case perm.FieldCode:
		return m.OldCode(ctx)
	case perm.FieldName:
		return m.OldName(ctx)
	case perm.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Perm field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermMutation) SetField(name string, value ent.Value) error {
	switch name {
	case perm.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case perm.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case perm.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Perm field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Perm numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(perm.FieldDescription) {
		fields = append(fields, perm.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermMutation) ClearField(name string) error {
	switch name {
	case perm.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Perm nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermMutation) ResetField(name string) error {
	switch name {
	case perm.FieldCode:
		m.ResetCode()
		return nil
	case perm.FieldName:
		m.ResetName()
		return nil
	case perm.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Perm field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, perm.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case perm.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, perm.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermMutation) EdgeCleared(name string) bool {
	switch name {
	case perm.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermMutation) ClearEdge(name string) error {
	switch name {
	case perm.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Perm unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermMutation) ResetEdge(name string) error {
	switch name {
	case perm.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Perm edge %s", name)
}

// PermGroupMutation represents an operation that mutates the PermGroup nodes in the graph.
type PermGroupMutation struct {
	config
	op            Op
	typ           string
	id            *int
	code          *string
	name          *string
	clearedFields map[string]struct{}
	perms         map[int]struct{}
	removedperms  map[int]struct{}
	clearedperms  bool
	done          bool
	oldValue      func(context.Context) (*PermGroup, error)
	predicates    []predicate.PermGroup
}

var _ ent.Mutation = (*PermGroupMutation)(nil)

// permgroupOption allows management of the mutation configuration using functional options.
type permgroupOption func(*PermGroupMutation)

// newPermGroupMutation creates new mutation for the PermGroup entity.
func newPermGroupMutation(c config, op Op, opts ...permgroupOption) *PermGroupMutation {
	m := &PermGroupMutation{
		config:        c,
		op:            op,
		typ:           TypePermGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermGroupID sets the ID field of the mutation.
func withPermGroupID(id int) permgroupOption {
	return func(m *PermGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *PermGroup
		)
		m.oldValue = func(ctx context.Context) (*PermGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PermGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermGroup sets the old PermGroup of the mutation.
func withPermGroup(node *PermGroup) permgroupOption {
	return func(m *PermGroupMutation) {
		m.oldValue = func(context.Context) (*PermGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PermGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *PermGroupMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PermGroupMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the PermGroup entity.
// If the PermGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermGroupMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PermGroupMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *PermGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PermGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PermGroup entity.
// If the PermGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PermGroupMutation) ResetName() {
	m.name = nil
}

// AddPermIDs adds the "perms" edge to the Perm entity by ids.
func (m *PermGroupMutation) AddPermIDs(ids ...int) {
	if m.perms == nil {
		m.perms = make(map[int]struct{})
	}
	for i := range ids {
		m.perms[ids[i]] = struct{}{}
	}
}

// ClearPerms clears the "perms" edge to the Perm entity.
func (m *PermGroupMutation) ClearPerms() {
	m.clearedperms = true
}

// PermsCleared reports if the "perms" edge to the Perm entity was cleared.
func (m *PermGroupMutation) PermsCleared() bool {
	return m.clearedperms
}

// RemovePermIDs removes the "perms" edge to the Perm entity by IDs.
func (m *PermGroupMutation) RemovePermIDs(ids ...int) {
	if m.removedperms == nil {
		m.removedperms = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.perms, ids[i])
		m.removedperms[ids[i]] = struct{}{}
	}
}

// RemovedPerms returns the removed IDs of the "perms" edge to the Perm entity.
func (m *PermGroupMutation) RemovedPermsIDs() (ids []int) {
	for id := range m.removedperms {
		ids = append(ids, id)
	}
	return
}

// PermsIDs returns the "perms" edge IDs in the mutation.
func (m *PermGroupMutation) PermsIDs() (ids []int) {
	for id := range m.perms {
		ids = append(ids, id)
	}
	return
}

// ResetPerms resets all changes to the "perms" edge.
func (m *PermGroupMutation) ResetPerms() {
	m.perms = nil
	m.clearedperms = false
	m.removedperms = nil
}

// Where appends a list predicates to the PermGroupMutation builder.
func (m *PermGroupMutation) Where(ps ...predicate.PermGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PermGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PermGroup).
func (m *PermGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermGroupMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.code != nil {
		fields = append(fields, permgroup.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, permgroup.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permgroup.FieldCode:
		return m.Code()
	case permgroup.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permgroup.FieldCode:
		return m.OldCode(ctx)
	case permgroup.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown PermGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permgroup.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case permgroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown PermGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PermGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PermGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermGroupMutation) ResetField(name string) error {
	switch name {
	case permgroup.FieldCode:
		m.ResetCode()
		return nil
	case permgroup.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown PermGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.perms != nil {
		edges = append(edges, permgroup.EdgePerms)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case permgroup.EdgePerms:
		ids := make([]ent.Value, 0, len(m.perms))
		for id := range m.perms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedperms != nil {
		edges = append(edges, permgroup.EdgePerms)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case permgroup.EdgePerms:
		ids := make([]ent.Value, 0, len(m.removedperms))
		for id := range m.removedperms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedperms {
		edges = append(edges, permgroup.EdgePerms)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case permgroup.EdgePerms:
		return m.clearedperms
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PermGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermGroupMutation) ResetEdge(name string) error {
	switch name {
	case permgroup.EdgePerms:
		m.ResetPerms()
		return nil
	}
	return fmt.Errorf("unknown PermGroup edge %s", name)
}
