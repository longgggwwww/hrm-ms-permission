// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-permission/ent/perm"
	"github.com/longgggwwww/hrm-ms-permission/ent/permgroup"
)

// Perm is the model entity for the Perm schema.
type Perm struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermQuery when eager-loading is set.
	Edges        PermEdges `json:"edges"`
	perm_group   *int
	selectValues sql.SelectValues
}

// PermEdges holds the relations/edges for other nodes in the graph.
type PermEdges struct {
	// Group holds the value of the group edge.
	Group *PermGroup `json:"group,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermEdges) GroupOrErr() (*PermGroup, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: permgroup.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e PermEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[1] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Perm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case perm.FieldID:
			values[i] = new(sql.NullInt64)
		case perm.FieldCode, perm.FieldName, perm.FieldDescription:
			values[i] = new(sql.NullString)
		case perm.ForeignKeys[0]: // perm_group
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Perm fields.
func (pe *Perm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case perm.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case perm.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pe.Code = value.String
			}
		case perm.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case perm.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pe.Description = value.String
			}
		case perm.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field perm_group", value)
			} else if value.Valid {
				pe.perm_group = new(int)
				*pe.perm_group = int(value.Int64)
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Perm.
// This includes values selected through modifiers, order, etc.
func (pe *Perm) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the Perm entity.
func (pe *Perm) QueryGroup() *PermGroupQuery {
	return NewPermClient(pe.config).QueryGroup(pe)
}

// QueryRoles queries the "roles" edge of the Perm entity.
func (pe *Perm) QueryRoles() *RoleQuery {
	return NewPermClient(pe.config).QueryRoles(pe)
}

// Update returns a builder for updating this Perm.
// Note that you need to call Perm.Unwrap() before calling this method if this Perm
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Perm) Update() *PermUpdateOne {
	return NewPermClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Perm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Perm) Unwrap() *Perm {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Perm is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Perm) String() string {
	var builder strings.Builder
	builder.WriteString("Perm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("code=")
	builder.WriteString(pe.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pe.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Perms is a parsable slice of Perm.
type Perms []*Perm
