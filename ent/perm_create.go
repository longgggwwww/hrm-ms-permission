// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-permission/ent/perm"
	"github.com/longgggwwww/hrm-ms-permission/ent/permgroup"
	"github.com/longgggwwww/hrm-ms-permission/ent/role"
	"github.com/longgggwwww/hrm-ms-permission/ent/userperm"
)

// PermCreate is the builder for creating a Perm entity.
type PermCreate struct {
	config
	mutation *PermMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (pc *PermCreate) SetCode(s string) *PermCreate {
	pc.mutation.SetCode(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PermCreate) SetName(s string) *PermCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PermCreate) SetDescription(s string) *PermCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PermCreate) SetNillableDescription(s *string) *PermCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PermCreate) SetID(u uuid.UUID) *PermCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PermCreate) SetNillableID(u *uuid.UUID) *PermCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetGroupID sets the "group" edge to the PermGroup entity by ID.
func (pc *PermCreate) SetGroupID(id uuid.UUID) *PermCreate {
	pc.mutation.SetGroupID(id)
	return pc
}

// SetNillableGroupID sets the "group" edge to the PermGroup entity by ID if the given value is not nil.
func (pc *PermCreate) SetNillableGroupID(id *uuid.UUID) *PermCreate {
	if id != nil {
		pc = pc.SetGroupID(*id)
	}
	return pc
}

// SetGroup sets the "group" edge to the PermGroup entity.
func (pc *PermCreate) SetGroup(p *PermGroup) *PermCreate {
	return pc.SetGroupID(p.ID)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (pc *PermCreate) AddRoleIDs(ids ...uuid.UUID) *PermCreate {
	pc.mutation.AddRoleIDs(ids...)
	return pc
}

// AddRoles adds the "roles" edges to the Role entity.
func (pc *PermCreate) AddRoles(r ...*Role) *PermCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRoleIDs(ids...)
}

// AddUserPermIDs adds the "user_perms" edge to the UserPerm entity by IDs.
func (pc *PermCreate) AddUserPermIDs(ids ...int) *PermCreate {
	pc.mutation.AddUserPermIDs(ids...)
	return pc
}

// AddUserPerms adds the "user_perms" edges to the UserPerm entity.
func (pc *PermCreate) AddUserPerms(u ...*UserPerm) *PermCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddUserPermIDs(ids...)
}

// Mutation returns the PermMutation object of the builder.
func (pc *PermCreate) Mutation() *PermMutation {
	return pc.mutation
}

// Save creates the Perm in the database.
func (pc *PermCreate) Save(ctx context.Context) (*Perm, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermCreate) SaveX(ctx context.Context) *Perm {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PermCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PermCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PermCreate) defaults() {
	if _, ok := pc.mutation.ID(); !ok {
		v := perm.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PermCreate) check() error {
	if _, ok := pc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Perm.code"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Perm.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := perm.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Perm.name": %w`, err)}
		}
	}
	return nil
}

func (pc *PermCreate) sqlSave(ctx context.Context) (*Perm, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PermCreate) createSpec() (*Perm, *sqlgraph.CreateSpec) {
	var (
		_node = &Perm{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(perm.Table, sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Code(); ok {
		_spec.SetField(perm.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(perm.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(perm.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := pc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   perm.GroupTable,
			Columns: []string{perm.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.perm_group = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   perm.RolesTable,
			Columns: perm.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserPermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   perm.UserPermsTable,
			Columns: []string{perm.UserPermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userperm.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Perm.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (pc *PermCreate) OnConflict(opts ...sql.ConflictOption) *PermUpsertOne {
	pc.conflict = opts
	return &PermUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Perm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PermCreate) OnConflictColumns(columns ...string) *PermUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PermUpsertOne{
		create: pc,
	}
}

type (
	// PermUpsertOne is the builder for "upsert"-ing
	//  one Perm node.
	PermUpsertOne struct {
		create *PermCreate
	}

	// PermUpsert is the "OnConflict" setter.
	PermUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *PermUpsert) SetCode(v string) *PermUpsert {
	u.Set(perm.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PermUpsert) UpdateCode() *PermUpsert {
	u.SetExcluded(perm.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *PermUpsert) SetName(v string) *PermUpsert {
	u.Set(perm.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermUpsert) UpdateName() *PermUpsert {
	u.SetExcluded(perm.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PermUpsert) SetDescription(v string) *PermUpsert {
	u.Set(perm.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermUpsert) UpdateDescription() *PermUpsert {
	u.SetExcluded(perm.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PermUpsert) ClearDescription() *PermUpsert {
	u.SetNull(perm.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Perm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(perm.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermUpsertOne) UpdateNewValues() *PermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(perm.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Perm.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PermUpsertOne) Ignore() *PermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermUpsertOne) DoNothing() *PermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermCreate.OnConflict
// documentation for more info.
func (u *PermUpsertOne) Update(set func(*PermUpsert)) *PermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *PermUpsertOne) SetCode(v string) *PermUpsertOne {
	return u.Update(func(s *PermUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PermUpsertOne) UpdateCode() *PermUpsertOne {
	return u.Update(func(s *PermUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *PermUpsertOne) SetName(v string) *PermUpsertOne {
	return u.Update(func(s *PermUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermUpsertOne) UpdateName() *PermUpsertOne {
	return u.Update(func(s *PermUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PermUpsertOne) SetDescription(v string) *PermUpsertOne {
	return u.Update(func(s *PermUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermUpsertOne) UpdateDescription() *PermUpsertOne {
	return u.Update(func(s *PermUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PermUpsertOne) ClearDescription() *PermUpsertOne {
	return u.Update(func(s *PermUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PermUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PermUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PermUpsertOne.ID is not supported by MySQL driver. Use PermUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PermUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PermCreateBulk is the builder for creating many Perm entities in bulk.
type PermCreateBulk struct {
	config
	err      error
	builders []*PermCreate
	conflict []sql.ConflictOption
}

// Save creates the Perm entities in the database.
func (pcb *PermCreateBulk) Save(ctx context.Context) ([]*Perm, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Perm, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PermCreateBulk) SaveX(ctx context.Context) []*Perm {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PermCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PermCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Perm.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (pcb *PermCreateBulk) OnConflict(opts ...sql.ConflictOption) *PermUpsertBulk {
	pcb.conflict = opts
	return &PermUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Perm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PermCreateBulk) OnConflictColumns(columns ...string) *PermUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PermUpsertBulk{
		create: pcb,
	}
}

// PermUpsertBulk is the builder for "upsert"-ing
// a bulk of Perm nodes.
type PermUpsertBulk struct {
	create *PermCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Perm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(perm.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermUpsertBulk) UpdateNewValues() *PermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(perm.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Perm.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PermUpsertBulk) Ignore() *PermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermUpsertBulk) DoNothing() *PermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermCreateBulk.OnConflict
// documentation for more info.
func (u *PermUpsertBulk) Update(set func(*PermUpsert)) *PermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *PermUpsertBulk) SetCode(v string) *PermUpsertBulk {
	return u.Update(func(s *PermUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PermUpsertBulk) UpdateCode() *PermUpsertBulk {
	return u.Update(func(s *PermUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *PermUpsertBulk) SetName(v string) *PermUpsertBulk {
	return u.Update(func(s *PermUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermUpsertBulk) UpdateName() *PermUpsertBulk {
	return u.Update(func(s *PermUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PermUpsertBulk) SetDescription(v string) *PermUpsertBulk {
	return u.Update(func(s *PermUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermUpsertBulk) UpdateDescription() *PermUpsertBulk {
	return u.Update(func(s *PermUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PermUpsertBulk) ClearDescription() *PermUpsertBulk {
	return u.Update(func(s *PermUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PermUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PermCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
