// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-permission/ent/perm"
	"github.com/longgggwwww/hrm-ms-permission/ent/permgroup"
	"github.com/longgggwwww/hrm-ms-permission/ent/predicate"
	"github.com/longgggwwww/hrm-ms-permission/ent/role"
)

// PermUpdate is the builder for updating Perm entities.
type PermUpdate struct {
	config
	hooks    []Hook
	mutation *PermMutation
}

// Where appends a list predicates to the PermUpdate builder.
func (pu *PermUpdate) Where(ps ...predicate.Perm) *PermUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCode sets the "code" field.
func (pu *PermUpdate) SetCode(s string) *PermUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *PermUpdate) SetNillableCode(s *string) *PermUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PermUpdate) SetName(s string) *PermUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PermUpdate) SetNillableName(s *string) *PermUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermUpdate) SetDescription(s string) *PermUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermUpdate) SetNillableDescription(s *string) *PermUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PermUpdate) ClearDescription() *PermUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetGroupID sets the "group" edge to the PermGroup entity by ID.
func (pu *PermUpdate) SetGroupID(id int) *PermUpdate {
	pu.mutation.SetGroupID(id)
	return pu
}

// SetNillableGroupID sets the "group" edge to the PermGroup entity by ID if the given value is not nil.
func (pu *PermUpdate) SetNillableGroupID(id *int) *PermUpdate {
	if id != nil {
		pu = pu.SetGroupID(*id)
	}
	return pu
}

// SetGroup sets the "group" edge to the PermGroup entity.
func (pu *PermUpdate) SetGroup(p *PermGroup) *PermUpdate {
	return pu.SetGroupID(p.ID)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (pu *PermUpdate) AddRoleIDs(ids ...int) *PermUpdate {
	pu.mutation.AddRoleIDs(ids...)
	return pu
}

// AddRoles adds the "roles" edges to the Role entity.
func (pu *PermUpdate) AddRoles(r ...*Role) *PermUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRoleIDs(ids...)
}

// Mutation returns the PermMutation object of the builder.
func (pu *PermUpdate) Mutation() *PermMutation {
	return pu.mutation
}

// ClearGroup clears the "group" edge to the PermGroup entity.
func (pu *PermUpdate) ClearGroup() *PermUpdate {
	pu.mutation.ClearGroup()
	return pu
}

// ClearRoles clears all "roles" edges to the Role entity.
func (pu *PermUpdate) ClearRoles() *PermUpdate {
	pu.mutation.ClearRoles()
	return pu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (pu *PermUpdate) RemoveRoleIDs(ids ...int) *PermUpdate {
	pu.mutation.RemoveRoleIDs(ids...)
	return pu
}

// RemoveRoles removes "roles" edges to Role entities.
func (pu *PermUpdate) RemoveRoles(r ...*Role) *PermUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := perm.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Perm.name": %w`, err)}
		}
	}
	return nil
}

func (pu *PermUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(perm.Table, perm.Columns, sqlgraph.NewFieldSpec(perm.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(perm.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(perm.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(perm.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(perm.FieldDescription, field.TypeString)
	}
	if pu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   perm.GroupTable,
			Columns: []string{perm.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   perm.GroupTable,
			Columns: []string{perm.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   perm.RolesTable,
			Columns: perm.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !pu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   perm.RolesTable,
			Columns: perm.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   perm.RolesTable,
			Columns: perm.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{perm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermUpdateOne is the builder for updating a single Perm entity.
type PermUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermMutation
}

// SetCode sets the "code" field.
func (puo *PermUpdateOne) SetCode(s string) *PermUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *PermUpdateOne) SetNillableCode(s *string) *PermUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PermUpdateOne) SetName(s string) *PermUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PermUpdateOne) SetNillableName(s *string) *PermUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PermUpdateOne) SetDescription(s string) *PermUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermUpdateOne) SetNillableDescription(s *string) *PermUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PermUpdateOne) ClearDescription() *PermUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetGroupID sets the "group" edge to the PermGroup entity by ID.
func (puo *PermUpdateOne) SetGroupID(id int) *PermUpdateOne {
	puo.mutation.SetGroupID(id)
	return puo
}

// SetNillableGroupID sets the "group" edge to the PermGroup entity by ID if the given value is not nil.
func (puo *PermUpdateOne) SetNillableGroupID(id *int) *PermUpdateOne {
	if id != nil {
		puo = puo.SetGroupID(*id)
	}
	return puo
}

// SetGroup sets the "group" edge to the PermGroup entity.
func (puo *PermUpdateOne) SetGroup(p *PermGroup) *PermUpdateOne {
	return puo.SetGroupID(p.ID)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (puo *PermUpdateOne) AddRoleIDs(ids ...int) *PermUpdateOne {
	puo.mutation.AddRoleIDs(ids...)
	return puo
}

// AddRoles adds the "roles" edges to the Role entity.
func (puo *PermUpdateOne) AddRoles(r ...*Role) *PermUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRoleIDs(ids...)
}

// Mutation returns the PermMutation object of the builder.
func (puo *PermUpdateOne) Mutation() *PermMutation {
	return puo.mutation
}

// ClearGroup clears the "group" edge to the PermGroup entity.
func (puo *PermUpdateOne) ClearGroup() *PermUpdateOne {
	puo.mutation.ClearGroup()
	return puo
}

// ClearRoles clears all "roles" edges to the Role entity.
func (puo *PermUpdateOne) ClearRoles() *PermUpdateOne {
	puo.mutation.ClearRoles()
	return puo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (puo *PermUpdateOne) RemoveRoleIDs(ids ...int) *PermUpdateOne {
	puo.mutation.RemoveRoleIDs(ids...)
	return puo
}

// RemoveRoles removes "roles" edges to Role entities.
func (puo *PermUpdateOne) RemoveRoles(r ...*Role) *PermUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the PermUpdate builder.
func (puo *PermUpdateOne) Where(ps ...predicate.Perm) *PermUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermUpdateOne) Select(field string, fields ...string) *PermUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Perm entity.
func (puo *PermUpdateOne) Save(ctx context.Context) (*Perm, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermUpdateOne) SaveX(ctx context.Context) *Perm {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := perm.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Perm.name": %w`, err)}
		}
	}
	return nil
}

func (puo *PermUpdateOne) sqlSave(ctx context.Context) (_node *Perm, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(perm.Table, perm.Columns, sqlgraph.NewFieldSpec(perm.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Perm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, perm.FieldID)
		for _, f := range fields {
			if !perm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != perm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(perm.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(perm.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(perm.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(perm.FieldDescription, field.TypeString)
	}
	if puo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   perm.GroupTable,
			Columns: []string{perm.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   perm.GroupTable,
			Columns: []string{perm.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   perm.RolesTable,
			Columns: perm.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !puo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   perm.RolesTable,
			Columns: perm.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   perm.RolesTable,
			Columns: perm.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Perm{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{perm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
