// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-permission/ent/permgroup"
	"github.com/longgggwwww/hrm-ms-permission/ent/predicate"
)

// PermGroupDelete is the builder for deleting a PermGroup entity.
type PermGroupDelete struct {
	config
	hooks    []Hook
	mutation *PermGroupMutation
}

// Where appends a list predicates to the PermGroupDelete builder.
func (pgd *PermGroupDelete) Where(ps ...predicate.PermGroup) *PermGroupDelete {
	pgd.mutation.Where(ps...)
	return pgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pgd *PermGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pgd.sqlExec, pgd.mutation, pgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pgd *PermGroupDelete) ExecX(ctx context.Context) int {
	n, err := pgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pgd *PermGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(permgroup.Table, sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeInt))
	if ps := pgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pgd.mutation.done = true
	return affected, err
}

// PermGroupDeleteOne is the builder for deleting a single PermGroup entity.
type PermGroupDeleteOne struct {
	pgd *PermGroupDelete
}

// Where appends a list predicates to the PermGroupDelete builder.
func (pgdo *PermGroupDeleteOne) Where(ps ...predicate.PermGroup) *PermGroupDeleteOne {
	pgdo.pgd.mutation.Where(ps...)
	return pgdo
}

// Exec executes the deletion query.
func (pgdo *PermGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := pgdo.pgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{permgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pgdo *PermGroupDeleteOne) ExecX(ctx context.Context) {
	if err := pgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
