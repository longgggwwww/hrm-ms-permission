// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-permission/ent/perm"
	"github.com/longgggwwww/hrm-ms-permission/ent/permgroup"
	"github.com/longgggwwww/hrm-ms-permission/ent/predicate"
)

// PermGroupUpdate is the builder for updating PermGroup entities.
type PermGroupUpdate struct {
	config
	hooks    []Hook
	mutation *PermGroupMutation
}

// Where appends a list predicates to the PermGroupUpdate builder.
func (pgu *PermGroupUpdate) Where(ps ...predicate.PermGroup) *PermGroupUpdate {
	pgu.mutation.Where(ps...)
	return pgu
}

// SetCode sets the "code" field.
func (pgu *PermGroupUpdate) SetCode(s string) *PermGroupUpdate {
	pgu.mutation.SetCode(s)
	return pgu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pgu *PermGroupUpdate) SetNillableCode(s *string) *PermGroupUpdate {
	if s != nil {
		pgu.SetCode(*s)
	}
	return pgu
}

// SetName sets the "name" field.
func (pgu *PermGroupUpdate) SetName(s string) *PermGroupUpdate {
	pgu.mutation.SetName(s)
	return pgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pgu *PermGroupUpdate) SetNillableName(s *string) *PermGroupUpdate {
	if s != nil {
		pgu.SetName(*s)
	}
	return pgu
}

// AddPermIDs adds the "perms" edge to the Perm entity by IDs.
func (pgu *PermGroupUpdate) AddPermIDs(ids ...uuid.UUID) *PermGroupUpdate {
	pgu.mutation.AddPermIDs(ids...)
	return pgu
}

// AddPerms adds the "perms" edges to the Perm entity.
func (pgu *PermGroupUpdate) AddPerms(p ...*Perm) *PermGroupUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgu.AddPermIDs(ids...)
}

// Mutation returns the PermGroupMutation object of the builder.
func (pgu *PermGroupUpdate) Mutation() *PermGroupMutation {
	return pgu.mutation
}

// ClearPerms clears all "perms" edges to the Perm entity.
func (pgu *PermGroupUpdate) ClearPerms() *PermGroupUpdate {
	pgu.mutation.ClearPerms()
	return pgu
}

// RemovePermIDs removes the "perms" edge to Perm entities by IDs.
func (pgu *PermGroupUpdate) RemovePermIDs(ids ...uuid.UUID) *PermGroupUpdate {
	pgu.mutation.RemovePermIDs(ids...)
	return pgu
}

// RemovePerms removes "perms" edges to Perm entities.
func (pgu *PermGroupUpdate) RemovePerms(p ...*Perm) *PermGroupUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgu.RemovePermIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pgu *PermGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pgu.sqlSave, pgu.mutation, pgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pgu *PermGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := pgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pgu *PermGroupUpdate) Exec(ctx context.Context) error {
	_, err := pgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgu *PermGroupUpdate) ExecX(ctx context.Context) {
	if err := pgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgu *PermGroupUpdate) check() error {
	if v, ok := pgu.mutation.Code(); ok {
		if err := permgroup.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PermGroup.code": %w`, err)}
		}
	}
	if v, ok := pgu.mutation.Name(); ok {
		if err := permgroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PermGroup.name": %w`, err)}
		}
	}
	return nil
}

func (pgu *PermGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permgroup.Table, permgroup.Columns, sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeUUID))
	if ps := pgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pgu.mutation.Code(); ok {
		_spec.SetField(permgroup.FieldCode, field.TypeString, value)
	}
	if value, ok := pgu.mutation.Name(); ok {
		_spec.SetField(permgroup.FieldName, field.TypeString, value)
	}
	if pgu.mutation.PermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permgroup.PermsTable,
			Columns: []string{permgroup.PermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.RemovedPermsIDs(); len(nodes) > 0 && !pgu.mutation.PermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permgroup.PermsTable,
			Columns: []string{permgroup.PermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.PermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permgroup.PermsTable,
			Columns: []string{permgroup.PermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pgu.mutation.done = true
	return n, nil
}

// PermGroupUpdateOne is the builder for updating a single PermGroup entity.
type PermGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermGroupMutation
}

// SetCode sets the "code" field.
func (pguo *PermGroupUpdateOne) SetCode(s string) *PermGroupUpdateOne {
	pguo.mutation.SetCode(s)
	return pguo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pguo *PermGroupUpdateOne) SetNillableCode(s *string) *PermGroupUpdateOne {
	if s != nil {
		pguo.SetCode(*s)
	}
	return pguo
}

// SetName sets the "name" field.
func (pguo *PermGroupUpdateOne) SetName(s string) *PermGroupUpdateOne {
	pguo.mutation.SetName(s)
	return pguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pguo *PermGroupUpdateOne) SetNillableName(s *string) *PermGroupUpdateOne {
	if s != nil {
		pguo.SetName(*s)
	}
	return pguo
}

// AddPermIDs adds the "perms" edge to the Perm entity by IDs.
func (pguo *PermGroupUpdateOne) AddPermIDs(ids ...uuid.UUID) *PermGroupUpdateOne {
	pguo.mutation.AddPermIDs(ids...)
	return pguo
}

// AddPerms adds the "perms" edges to the Perm entity.
func (pguo *PermGroupUpdateOne) AddPerms(p ...*Perm) *PermGroupUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pguo.AddPermIDs(ids...)
}

// Mutation returns the PermGroupMutation object of the builder.
func (pguo *PermGroupUpdateOne) Mutation() *PermGroupMutation {
	return pguo.mutation
}

// ClearPerms clears all "perms" edges to the Perm entity.
func (pguo *PermGroupUpdateOne) ClearPerms() *PermGroupUpdateOne {
	pguo.mutation.ClearPerms()
	return pguo
}

// RemovePermIDs removes the "perms" edge to Perm entities by IDs.
func (pguo *PermGroupUpdateOne) RemovePermIDs(ids ...uuid.UUID) *PermGroupUpdateOne {
	pguo.mutation.RemovePermIDs(ids...)
	return pguo
}

// RemovePerms removes "perms" edges to Perm entities.
func (pguo *PermGroupUpdateOne) RemovePerms(p ...*Perm) *PermGroupUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pguo.RemovePermIDs(ids...)
}

// Where appends a list predicates to the PermGroupUpdate builder.
func (pguo *PermGroupUpdateOne) Where(ps ...predicate.PermGroup) *PermGroupUpdateOne {
	pguo.mutation.Where(ps...)
	return pguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pguo *PermGroupUpdateOne) Select(field string, fields ...string) *PermGroupUpdateOne {
	pguo.fields = append([]string{field}, fields...)
	return pguo
}

// Save executes the query and returns the updated PermGroup entity.
func (pguo *PermGroupUpdateOne) Save(ctx context.Context) (*PermGroup, error) {
	return withHooks(ctx, pguo.sqlSave, pguo.mutation, pguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pguo *PermGroupUpdateOne) SaveX(ctx context.Context) *PermGroup {
	node, err := pguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pguo *PermGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := pguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pguo *PermGroupUpdateOne) ExecX(ctx context.Context) {
	if err := pguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pguo *PermGroupUpdateOne) check() error {
	if v, ok := pguo.mutation.Code(); ok {
		if err := permgroup.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "PermGroup.code": %w`, err)}
		}
	}
	if v, ok := pguo.mutation.Name(); ok {
		if err := permgroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PermGroup.name": %w`, err)}
		}
	}
	return nil
}

func (pguo *PermGroupUpdateOne) sqlSave(ctx context.Context) (_node *PermGroup, err error) {
	if err := pguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permgroup.Table, permgroup.Columns, sqlgraph.NewFieldSpec(permgroup.FieldID, field.TypeUUID))
	id, ok := pguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PermGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permgroup.FieldID)
		for _, f := range fields {
			if !permgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pguo.mutation.Code(); ok {
		_spec.SetField(permgroup.FieldCode, field.TypeString, value)
	}
	if value, ok := pguo.mutation.Name(); ok {
		_spec.SetField(permgroup.FieldName, field.TypeString, value)
	}
	if pguo.mutation.PermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permgroup.PermsTable,
			Columns: []string{permgroup.PermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.RemovedPermsIDs(); len(nodes) > 0 && !pguo.mutation.PermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permgroup.PermsTable,
			Columns: []string{permgroup.PermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.PermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permgroup.PermsTable,
			Columns: []string{permgroup.PermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PermGroup{config: pguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pguo.mutation.done = true
	return _node, nil
}
