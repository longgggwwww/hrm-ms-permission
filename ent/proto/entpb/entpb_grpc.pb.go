// Code generated by entproto. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: entpb/entpb.proto

package entpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PermService_Create_FullMethodName      = "/entpb.PermService/Create"
	PermService_Get_FullMethodName         = "/entpb.PermService/Get"
	PermService_Update_FullMethodName      = "/entpb.PermService/Update"
	PermService_Delete_FullMethodName      = "/entpb.PermService/Delete"
	PermService_List_FullMethodName        = "/entpb.PermService/List"
	PermService_BatchCreate_FullMethodName = "/entpb.PermService/BatchCreate"
)

// PermServiceClient is the client API for PermService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermServiceClient interface {
	Create(ctx context.Context, in *CreatePermRequest, opts ...grpc.CallOption) (*Perm, error)
	Get(ctx context.Context, in *GetPermRequest, opts ...grpc.CallOption) (*Perm, error)
	Update(ctx context.Context, in *UpdatePermRequest, opts ...grpc.CallOption) (*Perm, error)
	Delete(ctx context.Context, in *DeletePermRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListPermRequest, opts ...grpc.CallOption) (*ListPermResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreatePermsRequest, opts ...grpc.CallOption) (*BatchCreatePermsResponse, error)
}

type permServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermServiceClient(cc grpc.ClientConnInterface) PermServiceClient {
	return &permServiceClient{cc}
}

func (c *permServiceClient) Create(ctx context.Context, in *CreatePermRequest, opts ...grpc.CallOption) (*Perm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Perm)
	err := c.cc.Invoke(ctx, PermService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) Get(ctx context.Context, in *GetPermRequest, opts ...grpc.CallOption) (*Perm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Perm)
	err := c.cc.Invoke(ctx, PermService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) Update(ctx context.Context, in *UpdatePermRequest, opts ...grpc.CallOption) (*Perm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Perm)
	err := c.cc.Invoke(ctx, PermService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) Delete(ctx context.Context, in *DeletePermRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) List(ctx context.Context, in *ListPermRequest, opts ...grpc.CallOption) (*ListPermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermResponse)
	err := c.cc.Invoke(ctx, PermService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) BatchCreate(ctx context.Context, in *BatchCreatePermsRequest, opts ...grpc.CallOption) (*BatchCreatePermsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreatePermsResponse)
	err := c.cc.Invoke(ctx, PermService_BatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermServiceServer is the server API for PermService service.
// All implementations must embed UnimplementedPermServiceServer
// for forward compatibility.
type PermServiceServer interface {
	Create(context.Context, *CreatePermRequest) (*Perm, error)
	Get(context.Context, *GetPermRequest) (*Perm, error)
	Update(context.Context, *UpdatePermRequest) (*Perm, error)
	Delete(context.Context, *DeletePermRequest) (*emptypb.Empty, error)
	List(context.Context, *ListPermRequest) (*ListPermResponse, error)
	BatchCreate(context.Context, *BatchCreatePermsRequest) (*BatchCreatePermsResponse, error)
	mustEmbedUnimplementedPermServiceServer()
}

// UnimplementedPermServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermServiceServer struct{}

func (UnimplementedPermServiceServer) Create(context.Context, *CreatePermRequest) (*Perm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPermServiceServer) Get(context.Context, *GetPermRequest) (*Perm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPermServiceServer) Update(context.Context, *UpdatePermRequest) (*Perm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPermServiceServer) Delete(context.Context, *DeletePermRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPermServiceServer) List(context.Context, *ListPermRequest) (*ListPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPermServiceServer) BatchCreate(context.Context, *BatchCreatePermsRequest) (*BatchCreatePermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedPermServiceServer) mustEmbedUnimplementedPermServiceServer() {}
func (UnimplementedPermServiceServer) testEmbeddedByValue()                     {}

// UnsafePermServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermServiceServer will
// result in compilation errors.
type UnsafePermServiceServer interface {
	mustEmbedUnimplementedPermServiceServer()
}

func RegisterPermServiceServer(s grpc.ServiceRegistrar, srv PermServiceServer) {
	// If the following call pancis, it indicates UnimplementedPermServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermService_ServiceDesc, srv)
}

func _PermService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).Create(ctx, req.(*CreatePermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).Get(ctx, req.(*GetPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).Update(ctx, req.(*UpdatePermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).Delete(ctx, req.(*DeletePermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).List(ctx, req.(*ListPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreatePermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermService_BatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).BatchCreate(ctx, req.(*BatchCreatePermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermService_ServiceDesc is the grpc.ServiceDesc for PermService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.PermService",
	HandlerType: (*PermServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PermService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PermService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PermService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PermService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _PermService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

const (
	PermGroupService_Create_FullMethodName      = "/entpb.PermGroupService/Create"
	PermGroupService_Get_FullMethodName         = "/entpb.PermGroupService/Get"
	PermGroupService_Update_FullMethodName      = "/entpb.PermGroupService/Update"
	PermGroupService_Delete_FullMethodName      = "/entpb.PermGroupService/Delete"
	PermGroupService_List_FullMethodName        = "/entpb.PermGroupService/List"
	PermGroupService_BatchCreate_FullMethodName = "/entpb.PermGroupService/BatchCreate"
)

// PermGroupServiceClient is the client API for PermGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermGroupServiceClient interface {
	Create(ctx context.Context, in *CreatePermGroupRequest, opts ...grpc.CallOption) (*PermGroup, error)
	Get(ctx context.Context, in *GetPermGroupRequest, opts ...grpc.CallOption) (*PermGroup, error)
	Update(ctx context.Context, in *UpdatePermGroupRequest, opts ...grpc.CallOption) (*PermGroup, error)
	Delete(ctx context.Context, in *DeletePermGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListPermGroupRequest, opts ...grpc.CallOption) (*ListPermGroupResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreatePermGroupsRequest, opts ...grpc.CallOption) (*BatchCreatePermGroupsResponse, error)
}

type permGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermGroupServiceClient(cc grpc.ClientConnInterface) PermGroupServiceClient {
	return &permGroupServiceClient{cc}
}

func (c *permGroupServiceClient) Create(ctx context.Context, in *CreatePermGroupRequest, opts ...grpc.CallOption) (*PermGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermGroup)
	err := c.cc.Invoke(ctx, PermGroupService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permGroupServiceClient) Get(ctx context.Context, in *GetPermGroupRequest, opts ...grpc.CallOption) (*PermGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermGroup)
	err := c.cc.Invoke(ctx, PermGroupService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permGroupServiceClient) Update(ctx context.Context, in *UpdatePermGroupRequest, opts ...grpc.CallOption) (*PermGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermGroup)
	err := c.cc.Invoke(ctx, PermGroupService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permGroupServiceClient) Delete(ctx context.Context, in *DeletePermGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermGroupService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permGroupServiceClient) List(ctx context.Context, in *ListPermGroupRequest, opts ...grpc.CallOption) (*ListPermGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermGroupResponse)
	err := c.cc.Invoke(ctx, PermGroupService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permGroupServiceClient) BatchCreate(ctx context.Context, in *BatchCreatePermGroupsRequest, opts ...grpc.CallOption) (*BatchCreatePermGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreatePermGroupsResponse)
	err := c.cc.Invoke(ctx, PermGroupService_BatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermGroupServiceServer is the server API for PermGroupService service.
// All implementations must embed UnimplementedPermGroupServiceServer
// for forward compatibility.
type PermGroupServiceServer interface {
	Create(context.Context, *CreatePermGroupRequest) (*PermGroup, error)
	Get(context.Context, *GetPermGroupRequest) (*PermGroup, error)
	Update(context.Context, *UpdatePermGroupRequest) (*PermGroup, error)
	Delete(context.Context, *DeletePermGroupRequest) (*emptypb.Empty, error)
	List(context.Context, *ListPermGroupRequest) (*ListPermGroupResponse, error)
	BatchCreate(context.Context, *BatchCreatePermGroupsRequest) (*BatchCreatePermGroupsResponse, error)
	mustEmbedUnimplementedPermGroupServiceServer()
}

// UnimplementedPermGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermGroupServiceServer struct{}

func (UnimplementedPermGroupServiceServer) Create(context.Context, *CreatePermGroupRequest) (*PermGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPermGroupServiceServer) Get(context.Context, *GetPermGroupRequest) (*PermGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPermGroupServiceServer) Update(context.Context, *UpdatePermGroupRequest) (*PermGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPermGroupServiceServer) Delete(context.Context, *DeletePermGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPermGroupServiceServer) List(context.Context, *ListPermGroupRequest) (*ListPermGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPermGroupServiceServer) BatchCreate(context.Context, *BatchCreatePermGroupsRequest) (*BatchCreatePermGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedPermGroupServiceServer) mustEmbedUnimplementedPermGroupServiceServer() {}
func (UnimplementedPermGroupServiceServer) testEmbeddedByValue()                          {}

// UnsafePermGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermGroupServiceServer will
// result in compilation errors.
type UnsafePermGroupServiceServer interface {
	mustEmbedUnimplementedPermGroupServiceServer()
}

func RegisterPermGroupServiceServer(s grpc.ServiceRegistrar, srv PermGroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedPermGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermGroupService_ServiceDesc, srv)
}

func _PermGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermGroupService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermGroupServiceServer).Create(ctx, req.(*CreatePermGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermGroupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermGroupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermGroupService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermGroupServiceServer).Get(ctx, req.(*GetPermGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermGroupService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermGroupServiceServer).Update(ctx, req.(*UpdatePermGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermGroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermGroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermGroupService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermGroupServiceServer).Delete(ctx, req.(*DeletePermGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermGroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermGroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermGroupService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermGroupServiceServer).List(ctx, req.(*ListPermGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermGroupService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreatePermGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermGroupServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermGroupService_BatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermGroupServiceServer).BatchCreate(ctx, req.(*BatchCreatePermGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermGroupService_ServiceDesc is the grpc.ServiceDesc for PermGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.PermGroupService",
	HandlerType: (*PermGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PermGroupService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PermGroupService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PermGroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PermGroupService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermGroupService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _PermGroupService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

const (
	RoleService_Create_FullMethodName      = "/entpb.RoleService/Create"
	RoleService_Get_FullMethodName         = "/entpb.RoleService/Get"
	RoleService_Update_FullMethodName      = "/entpb.RoleService/Update"
	RoleService_Delete_FullMethodName      = "/entpb.RoleService/Delete"
	RoleService_List_FullMethodName        = "/entpb.RoleService/List"
	RoleService_BatchCreate_FullMethodName = "/entpb.RoleService/BatchCreate"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	Create(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	Get(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
	Update(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	Delete(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateRolesRequest, opts ...grpc.CallOption) (*BatchCreateRolesResponse, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) Create(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Get(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Update(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Delete(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) List(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoleResponse)
	err := c.cc.Invoke(ctx, RoleService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) BatchCreate(ctx context.Context, in *BatchCreateRolesRequest, opts ...grpc.CallOption) (*BatchCreateRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateRolesResponse)
	err := c.cc.Invoke(ctx, RoleService_BatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility.
type RoleServiceServer interface {
	Create(context.Context, *CreateRoleRequest) (*Role, error)
	Get(context.Context, *GetRoleRequest) (*Role, error)
	Update(context.Context, *UpdateRoleRequest) (*Role, error)
	Delete(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	List(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	BatchCreate(context.Context, *BatchCreateRolesRequest) (*BatchCreateRolesResponse, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleServiceServer struct{}

func (UnimplementedRoleServiceServer) Create(context.Context, *CreateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoleServiceServer) Get(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoleServiceServer) Update(context.Context, *UpdateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoleServiceServer) Delete(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoleServiceServer) List(context.Context, *ListRoleRequest) (*ListRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRoleServiceServer) BatchCreate(context.Context, *BatchCreateRolesRequest) (*BatchCreateRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}
func (UnimplementedRoleServiceServer) testEmbeddedByValue()                     {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Create(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Get(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Update(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).Delete(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).List(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_BatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).BatchCreate(ctx, req.(*BatchCreateRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoleService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoleService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoleService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RoleService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _RoleService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

const (
	UserPermService_Create_FullMethodName      = "/entpb.UserPermService/Create"
	UserPermService_Get_FullMethodName         = "/entpb.UserPermService/Get"
	UserPermService_Update_FullMethodName      = "/entpb.UserPermService/Update"
	UserPermService_Delete_FullMethodName      = "/entpb.UserPermService/Delete"
	UserPermService_List_FullMethodName        = "/entpb.UserPermService/List"
	UserPermService_BatchCreate_FullMethodName = "/entpb.UserPermService/BatchCreate"
)

// UserPermServiceClient is the client API for UserPermService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPermServiceClient interface {
	Create(ctx context.Context, in *CreateUserPermRequest, opts ...grpc.CallOption) (*UserPerm, error)
	Get(ctx context.Context, in *GetUserPermRequest, opts ...grpc.CallOption) (*UserPerm, error)
	Update(ctx context.Context, in *UpdateUserPermRequest, opts ...grpc.CallOption) (*UserPerm, error)
	Delete(ctx context.Context, in *DeleteUserPermRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListUserPermRequest, opts ...grpc.CallOption) (*ListUserPermResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateUserPermsRequest, opts ...grpc.CallOption) (*BatchCreateUserPermsResponse, error)
}

type userPermServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPermServiceClient(cc grpc.ClientConnInterface) UserPermServiceClient {
	return &userPermServiceClient{cc}
}

func (c *userPermServiceClient) Create(ctx context.Context, in *CreateUserPermRequest, opts ...grpc.CallOption) (*UserPerm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPerm)
	err := c.cc.Invoke(ctx, UserPermService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermServiceClient) Get(ctx context.Context, in *GetUserPermRequest, opts ...grpc.CallOption) (*UserPerm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPerm)
	err := c.cc.Invoke(ctx, UserPermService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermServiceClient) Update(ctx context.Context, in *UpdateUserPermRequest, opts ...grpc.CallOption) (*UserPerm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPerm)
	err := c.cc.Invoke(ctx, UserPermService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermServiceClient) Delete(ctx context.Context, in *DeleteUserPermRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPermService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermServiceClient) List(ctx context.Context, in *ListUserPermRequest, opts ...grpc.CallOption) (*ListUserPermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPermResponse)
	err := c.cc.Invoke(ctx, UserPermService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermServiceClient) BatchCreate(ctx context.Context, in *BatchCreateUserPermsRequest, opts ...grpc.CallOption) (*BatchCreateUserPermsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateUserPermsResponse)
	err := c.cc.Invoke(ctx, UserPermService_BatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPermServiceServer is the server API for UserPermService service.
// All implementations must embed UnimplementedUserPermServiceServer
// for forward compatibility.
type UserPermServiceServer interface {
	Create(context.Context, *CreateUserPermRequest) (*UserPerm, error)
	Get(context.Context, *GetUserPermRequest) (*UserPerm, error)
	Update(context.Context, *UpdateUserPermRequest) (*UserPerm, error)
	Delete(context.Context, *DeleteUserPermRequest) (*emptypb.Empty, error)
	List(context.Context, *ListUserPermRequest) (*ListUserPermResponse, error)
	BatchCreate(context.Context, *BatchCreateUserPermsRequest) (*BatchCreateUserPermsResponse, error)
	mustEmbedUnimplementedUserPermServiceServer()
}

// UnimplementedUserPermServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserPermServiceServer struct{}

func (UnimplementedUserPermServiceServer) Create(context.Context, *CreateUserPermRequest) (*UserPerm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserPermServiceServer) Get(context.Context, *GetUserPermRequest) (*UserPerm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserPermServiceServer) Update(context.Context, *UpdateUserPermRequest) (*UserPerm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserPermServiceServer) Delete(context.Context, *DeleteUserPermRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserPermServiceServer) List(context.Context, *ListUserPermRequest) (*ListUserPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserPermServiceServer) BatchCreate(context.Context, *BatchCreateUserPermsRequest) (*BatchCreateUserPermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedUserPermServiceServer) mustEmbedUnimplementedUserPermServiceServer() {}
func (UnimplementedUserPermServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserPermServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPermServiceServer will
// result in compilation errors.
type UnsafeUserPermServiceServer interface {
	mustEmbedUnimplementedUserPermServiceServer()
}

func RegisterUserPermServiceServer(s grpc.ServiceRegistrar, srv UserPermServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserPermServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserPermService_ServiceDesc, srv)
}

func _UserPermService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermServiceServer).Create(ctx, req.(*CreateUserPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermServiceServer).Get(ctx, req.(*GetUserPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermServiceServer).Update(ctx, req.(*UpdateUserPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermServiceServer).Delete(ctx, req.(*DeleteUserPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermServiceServer).List(ctx, req.(*ListUserPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateUserPermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPermService_BatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermServiceServer).BatchCreate(ctx, req.(*BatchCreateUserPermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPermService_ServiceDesc is the grpc.ServiceDesc for UserPermService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPermService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.UserPermService",
	HandlerType: (*UserPermServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserPermService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserPermService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserPermService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserPermService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserPermService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _UserPermService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

const (
	UserRoleService_Create_FullMethodName      = "/entpb.UserRoleService/Create"
	UserRoleService_Get_FullMethodName         = "/entpb.UserRoleService/Get"
	UserRoleService_Update_FullMethodName      = "/entpb.UserRoleService/Update"
	UserRoleService_Delete_FullMethodName      = "/entpb.UserRoleService/Delete"
	UserRoleService_List_FullMethodName        = "/entpb.UserRoleService/List"
	UserRoleService_BatchCreate_FullMethodName = "/entpb.UserRoleService/BatchCreate"
)

// UserRoleServiceClient is the client API for UserRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRoleServiceClient interface {
	Create(ctx context.Context, in *CreateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error)
	Get(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error)
	Update(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error)
	Delete(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListUserRoleRequest, opts ...grpc.CallOption) (*ListUserRoleResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateUserRolesRequest, opts ...grpc.CallOption) (*BatchCreateUserRolesResponse, error)
}

type userRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRoleServiceClient(cc grpc.ClientConnInterface) UserRoleServiceClient {
	return &userRoleServiceClient{cc}
}

func (c *userRoleServiceClient) Create(ctx context.Context, in *CreateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRole)
	err := c.cc.Invoke(ctx, UserRoleService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) Get(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRole)
	err := c.cc.Invoke(ctx, UserRoleService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) Update(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRole)
	err := c.cc.Invoke(ctx, UserRoleService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) Delete(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserRoleService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) List(ctx context.Context, in *ListUserRoleRequest, opts ...grpc.CallOption) (*ListUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserRoleResponse)
	err := c.cc.Invoke(ctx, UserRoleService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) BatchCreate(ctx context.Context, in *BatchCreateUserRolesRequest, opts ...grpc.CallOption) (*BatchCreateUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateUserRolesResponse)
	err := c.cc.Invoke(ctx, UserRoleService_BatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRoleServiceServer is the server API for UserRoleService service.
// All implementations must embed UnimplementedUserRoleServiceServer
// for forward compatibility.
type UserRoleServiceServer interface {
	Create(context.Context, *CreateUserRoleRequest) (*UserRole, error)
	Get(context.Context, *GetUserRoleRequest) (*UserRole, error)
	Update(context.Context, *UpdateUserRoleRequest) (*UserRole, error)
	Delete(context.Context, *DeleteUserRoleRequest) (*emptypb.Empty, error)
	List(context.Context, *ListUserRoleRequest) (*ListUserRoleResponse, error)
	BatchCreate(context.Context, *BatchCreateUserRolesRequest) (*BatchCreateUserRolesResponse, error)
	mustEmbedUnimplementedUserRoleServiceServer()
}

// UnimplementedUserRoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserRoleServiceServer struct{}

func (UnimplementedUserRoleServiceServer) Create(context.Context, *CreateUserRoleRequest) (*UserRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserRoleServiceServer) Get(context.Context, *GetUserRoleRequest) (*UserRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserRoleServiceServer) Update(context.Context, *UpdateUserRoleRequest) (*UserRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserRoleServiceServer) Delete(context.Context, *DeleteUserRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserRoleServiceServer) List(context.Context, *ListUserRoleRequest) (*ListUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserRoleServiceServer) BatchCreate(context.Context, *BatchCreateUserRolesRequest) (*BatchCreateUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedUserRoleServiceServer) mustEmbedUnimplementedUserRoleServiceServer() {}
func (UnimplementedUserRoleServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRoleServiceServer will
// result in compilation errors.
type UnsafeUserRoleServiceServer interface {
	mustEmbedUnimplementedUserRoleServiceServer()
}

func RegisterUserRoleServiceServer(s grpc.ServiceRegistrar, srv UserRoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserRoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserRoleService_ServiceDesc, srv)
}

func _UserRoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).Create(ctx, req.(*CreateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).Get(ctx, req.(*GetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).Update(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).Delete(ctx, req.(*DeleteUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).List(ctx, req.(*ListUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_BatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).BatchCreate(ctx, req.(*BatchCreateUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRoleService_ServiceDesc is the grpc.ServiceDesc for UserRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.UserRoleService",
	HandlerType: (*UserRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserRoleService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserRoleService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserRoleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserRoleService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserRoleService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _UserRoleService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
