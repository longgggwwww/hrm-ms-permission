// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/longgggwwww/hrm-ms-permission/ent"
	perm "github.com/longgggwwww/hrm-ms-permission/ent/perm"
	permgroup "github.com/longgggwwww/hrm-ms-permission/ent/permgroup"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// PermGroupService implements PermGroupServiceServer
type PermGroupService struct {
	client *ent.Client
	UnimplementedPermGroupServiceServer
}

// NewPermGroupService returns a new PermGroupService
func NewPermGroupService(client *ent.Client) *PermGroupService {
	return &PermGroupService{
		client: client,
	}
}

// toProtoPermGroup transforms the ent type to the pb type
func toProtoPermGroup(e *ent.PermGroup) (*PermGroup, error) {
	v := &PermGroup{}
	code := e.Code
	v.Code = code
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	name := e.Name
	v.Name = name
	for _, edg := range e.Edges.Perms {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Perms = append(v.Perms, &Perm{
			Id: id,
		})
	}
	return v, nil
}

// toProtoPermGroupList transforms a list of ent type to a list of pb type
func toProtoPermGroupList(e []*ent.PermGroup) ([]*PermGroup, error) {
	var pbList []*PermGroup
	for _, entEntity := range e {
		pbEntity, err := toProtoPermGroup(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Get implements PermGroupServiceServer.Get
func (svc *PermGroupService) Get(ctx context.Context, req *GetPermGroupRequest) (*PermGroup, error) {
	var (
		err error
		get *ent.PermGroup
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetPermGroupRequest_VIEW_UNSPECIFIED, GetPermGroupRequest_BASIC:
		get, err = svc.client.PermGroup.Get(ctx, id)
	case GetPermGroupRequest_WITH_EDGE_IDS:
		get, err = svc.client.PermGroup.Query().
			Where(permgroup.ID(id)).
			WithPerms(func(query *ent.PermQuery) {
				query.Select(perm.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoPermGroup(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements PermGroupServiceServer.List
func (svc *PermGroupService) List(ctx context.Context, req *ListPermGroupRequest) (*ListPermGroupResponse, error) {
	var (
		err      error
		entList  []*ent.PermGroup
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.PermGroup.Query().
		Order(ent.Desc(permgroup.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(permgroup.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListPermGroupRequest_VIEW_UNSPECIFIED, ListPermGroupRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListPermGroupRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithPerms(func(query *ent.PermQuery) {
				query.Select(perm.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoPermGroupList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListPermGroupResponse{
			PermGroupList: protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
