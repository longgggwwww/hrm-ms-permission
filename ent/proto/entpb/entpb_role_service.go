// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwww/hrm-ms-permission/ent"
	perm "github.com/longgggwww/hrm-ms-permission/ent/perm"
	role "github.com/longgggwww/hrm-ms-permission/ent/role"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// RoleService implements RoleServiceServer
type RoleService struct {
	client *ent.Client
	UnimplementedRoleServiceServer
}

// NewRoleService returns a new RoleService
func NewRoleService(client *ent.Client) *RoleService {
	return &RoleService{
		client: client,
	}
}

// toProtoRole transforms the ent type to the pb type
func toProtoRole(e *ent.Role) (*Role, error) {
	v := &Role{}
	color := wrapperspb.String(e.Color)
	v.Color = color
	description := wrapperspb.String(e.Description)
	v.Description = description
	id := int64(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	for _, edg := range e.Edges.Perms {
		id := int64(edg.ID)
		v.Perms = append(v.Perms, &Perm{
			Id: id,
		})
	}
	return v, nil
}

// toProtoRoleList transforms a list of ent type to a list of pb type
func toProtoRoleList(e []*ent.Role) ([]*Role, error) {
	var pbList []*Role
	for _, entEntity := range e {
		pbEntity, err := toProtoRole(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements RoleServiceServer.Create
func (svc *RoleService) Create(ctx context.Context, req *CreateRoleRequest) (*Role, error) {
	role := req.GetRole()
	m, err := svc.createBuilder(role)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoRole(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements RoleServiceServer.Get
func (svc *RoleService) Get(ctx context.Context, req *GetRoleRequest) (*Role, error) {
	var (
		err error
		get *ent.Role
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetRoleRequest_VIEW_UNSPECIFIED, GetRoleRequest_BASIC:
		get, err = svc.client.Role.Get(ctx, id)
	case GetRoleRequest_WITH_EDGE_IDS:
		get, err = svc.client.Role.Query().
			Where(role.ID(id)).
			WithPerms(func(query *ent.PermQuery) {
				query.Select(perm.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoRole(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements RoleServiceServer.Update
func (svc *RoleService) Update(ctx context.Context, req *UpdateRoleRequest) (*Role, error) {
	role := req.GetRole()
	roleID := int(role.GetId())
	m := svc.client.Role.UpdateOneID(roleID)
	if role.GetColor() != nil {
		roleColor := role.GetColor().GetValue()
		m.SetColor(roleColor)
	}
	if role.GetDescription() != nil {
		roleDescription := role.GetDescription().GetValue()
		m.SetDescription(roleDescription)
	}
	roleName := role.GetName()
	m.SetName(roleName)
	for _, item := range role.GetPerms() {
		perms := int(item.GetId())
		m.AddPermIDs(perms)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoRole(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements RoleServiceServer.Delete
func (svc *RoleService) Delete(ctx context.Context, req *DeleteRoleRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Role.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements RoleServiceServer.List
func (svc *RoleService) List(ctx context.Context, req *ListRoleRequest) (*ListRoleResponse, error) {
	var (
		err      error
		entList  []*ent.Role
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Role.Query().
		Order(ent.Desc(role.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(role.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListRoleRequest_VIEW_UNSPECIFIED, ListRoleRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListRoleRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithPerms(func(query *ent.PermQuery) {
				query.Select(perm.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoRoleList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListRoleResponse{
			RoleList:      protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements RoleServiceServer.BatchCreate
func (svc *RoleService) BatchCreate(ctx context.Context, req *BatchCreateRolesRequest) (*BatchCreateRolesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.RoleCreate, len(requests))
	for i, req := range requests {
		role := req.GetRole()
		var err error
		bulk[i], err = svc.createBuilder(role)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Role.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoRoleList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateRolesResponse{
			Roles: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *RoleService) createBuilder(role *Role) (*ent.RoleCreate, error) {
	m := svc.client.Role.Create()
	if role.GetColor() != nil {
		roleColor := role.GetColor().GetValue()
		m.SetColor(roleColor)
	}
	if role.GetDescription() != nil {
		roleDescription := role.GetDescription().GetValue()
		m.SetDescription(roleDescription)
	}
	roleName := role.GetName()
	m.SetName(roleName)
	for _, item := range role.GetPerms() {
		perms := int(item.GetId())
		m.AddPermIDs(perms)
	}
	return m, nil
}
