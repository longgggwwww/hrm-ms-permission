// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/longgggwwww/hrm-ms-permission/ent"
	userperm "github.com/longgggwwww/hrm-ms-permission/ent/userperm"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strconv "strconv"
)

// UserPermService implements UserPermServiceServer
type UserPermService struct {
	client *ent.Client
	UnimplementedUserPermServiceServer
}

// NewUserPermService returns a new UserPermService
func NewUserPermService(client *ent.Client) *UserPermService {
	return &UserPermService{
		client: client,
	}
}

// toProtoUserPerm transforms the ent type to the pb type
func toProtoUserPerm(e *ent.UserPerm) (*UserPerm, error) {
	v := &UserPerm{}
	id := int64(e.ID)
	v.Id = id
	perm_id, err := e.PermID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.PermId = perm_id
	user_id := e.UserID
	v.UserId = user_id
	return v, nil
}

// toProtoUserPermList transforms a list of ent type to a list of pb type
func toProtoUserPermList(e []*ent.UserPerm) ([]*UserPerm, error) {
	var pbList []*UserPerm
	for _, entEntity := range e {
		pbEntity, err := toProtoUserPerm(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements UserPermServiceServer.Create
func (svc *UserPermService) Create(ctx context.Context, req *CreateUserPermRequest) (*UserPerm, error) {
	userperm := req.GetUserPerm()
	m, err := svc.createBuilder(userperm)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserPerm(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements UserPermServiceServer.Get
func (svc *UserPermService) Get(ctx context.Context, req *GetUserPermRequest) (*UserPerm, error) {
	var (
		err error
		get *ent.UserPerm
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetUserPermRequest_VIEW_UNSPECIFIED, GetUserPermRequest_BASIC:
		get, err = svc.client.UserPerm.Get(ctx, id)
	case GetUserPermRequest_WITH_EDGE_IDS:
		get, err = svc.client.UserPerm.Query().
			Where(userperm.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoUserPerm(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements UserPermServiceServer.Update
func (svc *UserPermService) Update(ctx context.Context, req *UpdateUserPermRequest) (*UserPerm, error) {
	userperm := req.GetUserPerm()
	userpermID := int(userperm.GetId())
	m := svc.client.UserPerm.UpdateOneID(userpermID)
	var userpermPermID uuid.UUID
	if err := (&userpermPermID).UnmarshalBinary(userperm.GetPermId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetPermID(userpermPermID)
	userpermUserID := userperm.GetUserId()
	m.SetUserID(userpermUserID)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserPerm(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements UserPermServiceServer.Delete
func (svc *UserPermService) Delete(ctx context.Context, req *DeleteUserPermRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.UserPerm.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements UserPermServiceServer.List
func (svc *UserPermService) List(ctx context.Context, req *ListUserPermRequest) (*ListUserPermResponse, error) {
	var (
		err      error
		entList  []*ent.UserPerm
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.UserPerm.Query().
		Order(ent.Desc(userperm.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(userperm.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListUserPermRequest_VIEW_UNSPECIFIED, ListUserPermRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListUserPermRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoUserPermList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListUserPermResponse{
			UserPermList:  protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements UserPermServiceServer.BatchCreate
func (svc *UserPermService) BatchCreate(ctx context.Context, req *BatchCreateUserPermsRequest) (*BatchCreateUserPermsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.UserPermCreate, len(requests))
	for i, req := range requests {
		userperm := req.GetUserPerm()
		var err error
		bulk[i], err = svc.createBuilder(userperm)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.UserPerm.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoUserPermList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateUserPermsResponse{
			UserPerms: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *UserPermService) createBuilder(userperm *UserPerm) (*ent.UserPermCreate, error) {
	m := svc.client.UserPerm.Create()
	var userpermPermID uuid.UUID
	if err := (&userpermPermID).UnmarshalBinary(userperm.GetPermId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetPermID(userpermPermID)
	userpermUserID := userperm.GetUserId()
	m.SetUserID(userpermUserID)
	return m, nil
}
