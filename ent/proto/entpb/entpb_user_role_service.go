// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/longgggwwww/hrm-ms-permission/ent"
	role "github.com/longgggwwww/hrm-ms-permission/ent/role"
	userrole "github.com/longgggwwww/hrm-ms-permission/ent/userrole"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// UserRoleService implements UserRoleServiceServer
type UserRoleService struct {
	client *ent.Client
	UnimplementedUserRoleServiceServer
}

// NewUserRoleService returns a new UserRoleService
func NewUserRoleService(client *ent.Client) *UserRoleService {
	return &UserRoleService{
		client: client,
	}
}

// toProtoUserRole transforms the ent type to the pb type
func toProtoUserRole(e *ent.UserRole) (*UserRole, error) {
	v := &UserRole{}
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	role, err := e.RoleID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.RoleId = role
	user_id := e.UserID
	v.UserId = user_id
	if edg := e.Edges.Role; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Role = &Role{
			Id: id,
		}
	}
	return v, nil
}

// toProtoUserRoleList transforms a list of ent type to a list of pb type
func toProtoUserRoleList(e []*ent.UserRole) ([]*UserRole, error) {
	var pbList []*UserRole
	for _, entEntity := range e {
		pbEntity, err := toProtoUserRole(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements UserRoleServiceServer.Create
func (svc *UserRoleService) Create(ctx context.Context, req *CreateUserRoleRequest) (*UserRole, error) {
	userrole := req.GetUserRole()
	m, err := svc.createBuilder(userrole)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserRole(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements UserRoleServiceServer.Get
func (svc *UserRoleService) Get(ctx context.Context, req *GetUserRoleRequest) (*UserRole, error) {
	var (
		err error
		get *ent.UserRole
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetUserRoleRequest_VIEW_UNSPECIFIED, GetUserRoleRequest_BASIC:
		get, err = svc.client.UserRole.Get(ctx, id)
	case GetUserRoleRequest_WITH_EDGE_IDS:
		get, err = svc.client.UserRole.Query().
			Where(userrole.ID(id)).
			WithRole(func(query *ent.RoleQuery) {
				query.Select(role.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoUserRole(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements UserRoleServiceServer.Update
func (svc *UserRoleService) Update(ctx context.Context, req *UpdateUserRoleRequest) (*UserRole, error) {
	userrole := req.GetUserRole()
	var userroleID uuid.UUID
	if err := (&userroleID).UnmarshalBinary(userrole.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.UserRole.UpdateOneID(userroleID)
	var userroleRoleID uuid.UUID
	if err := (&userroleRoleID).UnmarshalBinary(userrole.GetRoleId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetRoleID(userroleRoleID)
	userroleUserID := userrole.GetUserId()
	m.SetUserID(userroleUserID)
	if userrole.GetRole() != nil {
		var userroleRole uuid.UUID
		if err := (&userroleRole).UnmarshalBinary(userrole.GetRole().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetRoleID(userroleRole)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUserRole(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements UserRoleServiceServer.Delete
func (svc *UserRoleService) Delete(ctx context.Context, req *DeleteUserRoleRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.UserRole.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements UserRoleServiceServer.List
func (svc *UserRoleService) List(ctx context.Context, req *ListUserRoleRequest) (*ListUserRoleResponse, error) {
	var (
		err      error
		entList  []*ent.UserRole
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.UserRole.Query().
		Order(ent.Desc(userrole.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(userrole.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListUserRoleRequest_VIEW_UNSPECIFIED, ListUserRoleRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListUserRoleRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithRole(func(query *ent.RoleQuery) {
				query.Select(role.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoUserRoleList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListUserRoleResponse{
			UserRoleList:  protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements UserRoleServiceServer.BatchCreate
func (svc *UserRoleService) BatchCreate(ctx context.Context, req *BatchCreateUserRolesRequest) (*BatchCreateUserRolesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.UserRoleCreate, len(requests))
	for i, req := range requests {
		userrole := req.GetUserRole()
		var err error
		bulk[i], err = svc.createBuilder(userrole)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.UserRole.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoUserRoleList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateUserRolesResponse{
			UserRoles: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *UserRoleService) createBuilder(userrole *UserRole) (*ent.UserRoleCreate, error) {
	m := svc.client.UserRole.Create()
	var userroleRoleID uuid.UUID
	if err := (&userroleRoleID).UnmarshalBinary(userrole.GetRoleId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetRoleID(userroleRoleID)
	userroleUserID := userrole.GetUserId()
	m.SetUserID(userroleUserID)
	if userrole.GetRole() != nil {
		var userroleRole uuid.UUID
		if err := (&userroleRole).UnmarshalBinary(userrole.GetRole().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetRoleID(userroleRole)
	}
	return m, nil
}
