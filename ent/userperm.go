// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-permission/ent/perm"
	"github.com/longgggwwww/hrm-ms-permission/ent/userperm"
)

// UserPerm is the model entity for the UserPerm schema.
type UserPerm struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// PermID holds the value of the "perm_id" field.
	PermID uuid.UUID `json:"perm_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPermQuery when eager-loading is set.
	Edges        UserPermEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserPermEdges holds the relations/edges for other nodes in the graph.
type UserPermEdges struct {
	// Perm holds the value of the perm edge.
	Perm *Perm `json:"perm,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PermOrErr returns the Perm value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermEdges) PermOrErr() (*Perm, error) {
	if e.Perm != nil {
		return e.Perm, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: perm.Label}
	}
	return nil, &NotLoadedError{edge: "perm"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPerm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userperm.FieldUserID:
			values[i] = new(sql.NullString)
		case userperm.FieldCreatedAt, userperm.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userperm.FieldID, userperm.FieldPermID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPerm fields.
func (up *UserPerm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userperm.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				up.ID = *value
			}
		case userperm.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = value.String
			}
		case userperm.FieldPermID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field perm_id", values[i])
			} else if value != nil {
				up.PermID = *value
			}
		case userperm.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case userperm.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Time
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPerm.
// This includes values selected through modifiers, order, etc.
func (up *UserPerm) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryPerm queries the "perm" edge of the UserPerm entity.
func (up *UserPerm) QueryPerm() *PermQuery {
	return NewUserPermClient(up.config).QueryPerm(up)
}

// Update returns a builder for updating this UserPerm.
// Note that you need to call UserPerm.Unwrap() before calling this method if this UserPerm
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPerm) Update() *UserPermUpdateOne {
	return NewUserPermClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPerm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPerm) Unwrap() *UserPerm {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPerm is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPerm) String() string {
	var builder strings.Builder
	builder.WriteString("UserPerm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("user_id=")
	builder.WriteString(up.UserID)
	builder.WriteString(", ")
	builder.WriteString("perm_id=")
	builder.WriteString(fmt.Sprintf("%v", up.PermID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(up.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserPerms is a parsable slice of UserPerm.
type UserPerms []*UserPerm
