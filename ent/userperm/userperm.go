// Code generated by ent, DO NOT EDIT.

package userperm

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the userperm type in the database.
	Label = "user_perm"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPermID holds the string denoting the perm_id field in the database.
	FieldPermID = "perm_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePerm holds the string denoting the perm edge name in mutations.
	EdgePerm = "perm"
	// Table holds the table name of the userperm in the database.
	Table = "user_perms"
	// PermTable is the table that holds the perm relation/edge.
	PermTable = "user_perms"
	// PermInverseTable is the table name for the Perm entity.
	// It exists in this package in order to avoid circular dependency with the "perm" package.
	PermInverseTable = "perms"
	// PermColumn is the table column denoting the perm relation/edge.
	PermColumn = "perm_id"
)

// Columns holds all SQL columns for userperm fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPermID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the UserPerm queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPermID orders the results by the perm_id field.
func ByPermID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPermField orders the results by perm field.
func ByPermField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermStep(), sql.OrderByField(field, opts...))
	}
}
func newPermStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PermTable, PermColumn),
	)
}
