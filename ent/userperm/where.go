// Code generated by ent, DO NOT EDIT.

package userperm

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-permission/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldEQ(FieldUserID, v))
}

// PermID applies equality check predicate on the "perm_id" field. It's identical to PermIDEQ.
func PermID(v uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldEQ(FieldPermID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldContainsFold(FieldUserID, v))
}

// PermIDEQ applies the EQ predicate on the "perm_id" field.
func PermIDEQ(v uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldEQ(FieldPermID, v))
}

// PermIDNEQ applies the NEQ predicate on the "perm_id" field.
func PermIDNEQ(v uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldNEQ(FieldPermID, v))
}

// PermIDIn applies the In predicate on the "perm_id" field.
func PermIDIn(vs ...uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldIn(FieldPermID, vs...))
}

// PermIDNotIn applies the NotIn predicate on the "perm_id" field.
func PermIDNotIn(vs ...uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldNotIn(FieldPermID, vs...))
}

// PermIDGT applies the GT predicate on the "perm_id" field.
func PermIDGT(v uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldGT(FieldPermID, v))
}

// PermIDGTE applies the GTE predicate on the "perm_id" field.
func PermIDGTE(v uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldGTE(FieldPermID, v))
}

// PermIDLT applies the LT predicate on the "perm_id" field.
func PermIDLT(v uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldLT(FieldPermID, v))
}

// PermIDLTE applies the LTE predicate on the "perm_id" field.
func PermIDLTE(v uuid.UUID) predicate.UserPerm {
	return predicate.UserPerm(sql.FieldLTE(FieldPermID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPerm) predicate.UserPerm {
	return predicate.UserPerm(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPerm) predicate.UserPerm {
	return predicate.UserPerm(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPerm) predicate.UserPerm {
	return predicate.UserPerm(sql.NotPredicates(p))
}
