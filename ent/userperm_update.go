// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-permission/ent/perm"
	"github.com/longgggwwww/hrm-ms-permission/ent/predicate"
	"github.com/longgggwwww/hrm-ms-permission/ent/userperm"
)

// UserPermUpdate is the builder for updating UserPerm entities.
type UserPermUpdate struct {
	config
	hooks    []Hook
	mutation *UserPermMutation
}

// Where appends a list predicates to the UserPermUpdate builder.
func (upu *UserPermUpdate) Where(ps ...predicate.UserPerm) *UserPermUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPermUpdate) SetUserID(s string) *UserPermUpdate {
	upu.mutation.SetUserID(s)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserPermUpdate) SetNillableUserID(s *string) *UserPermUpdate {
	if s != nil {
		upu.SetUserID(*s)
	}
	return upu
}

// SetPermID sets the "perm_id" field.
func (upu *UserPermUpdate) SetPermID(u uuid.UUID) *UserPermUpdate {
	upu.mutation.SetPermID(u)
	return upu
}

// SetNillablePermID sets the "perm_id" field if the given value is not nil.
func (upu *UserPermUpdate) SetNillablePermID(u *uuid.UUID) *UserPermUpdate {
	if u != nil {
		upu.SetPermID(*u)
	}
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UserPermUpdate) SetUpdatedAt(t time.Time) *UserPermUpdate {
	upu.mutation.SetUpdatedAt(t)
	return upu
}

// SetPerm sets the "perm" edge to the Perm entity.
func (upu *UserPermUpdate) SetPerm(p *Perm) *UserPermUpdate {
	return upu.SetPermID(p.ID)
}

// Mutation returns the UserPermMutation object of the builder.
func (upu *UserPermUpdate) Mutation() *UserPermMutation {
	return upu.mutation
}

// ClearPerm clears the "perm" edge to the Perm entity.
func (upu *UserPermUpdate) ClearPerm() *UserPermUpdate {
	upu.mutation.ClearPerm()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPermUpdate) Save(ctx context.Context) (int, error) {
	upu.defaults()
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPermUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPermUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPermUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserPermUpdate) defaults() {
	if _, ok := upu.mutation.UpdatedAt(); !ok {
		v := userperm.UpdateDefaultUpdatedAt()
		upu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPermUpdate) check() error {
	if v, ok := upu.mutation.UserID(); ok {
		if err := userperm.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserPerm.user_id": %w`, err)}
		}
	}
	if upu.mutation.PermCleared() && len(upu.mutation.PermIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPerm.perm"`)
	}
	return nil
}

func (upu *UserPermUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userperm.Table, userperm.Columns, sqlgraph.NewFieldSpec(userperm.FieldID, field.TypeUUID))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.UserID(); ok {
		_spec.SetField(userperm.FieldUserID, field.TypeString, value)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userperm.FieldUpdatedAt, field.TypeTime, value)
	}
	if upu.mutation.PermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userperm.PermTable,
			Columns: []string{userperm.PermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.PermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userperm.PermTable,
			Columns: []string{userperm.PermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userperm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPermUpdateOne is the builder for updating a single UserPerm entity.
type UserPermUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPermMutation
}

// SetUserID sets the "user_id" field.
func (upuo *UserPermUpdateOne) SetUserID(s string) *UserPermUpdateOne {
	upuo.mutation.SetUserID(s)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserPermUpdateOne) SetNillableUserID(s *string) *UserPermUpdateOne {
	if s != nil {
		upuo.SetUserID(*s)
	}
	return upuo
}

// SetPermID sets the "perm_id" field.
func (upuo *UserPermUpdateOne) SetPermID(u uuid.UUID) *UserPermUpdateOne {
	upuo.mutation.SetPermID(u)
	return upuo
}

// SetNillablePermID sets the "perm_id" field if the given value is not nil.
func (upuo *UserPermUpdateOne) SetNillablePermID(u *uuid.UUID) *UserPermUpdateOne {
	if u != nil {
		upuo.SetPermID(*u)
	}
	return upuo
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UserPermUpdateOne) SetUpdatedAt(t time.Time) *UserPermUpdateOne {
	upuo.mutation.SetUpdatedAt(t)
	return upuo
}

// SetPerm sets the "perm" edge to the Perm entity.
func (upuo *UserPermUpdateOne) SetPerm(p *Perm) *UserPermUpdateOne {
	return upuo.SetPermID(p.ID)
}

// Mutation returns the UserPermMutation object of the builder.
func (upuo *UserPermUpdateOne) Mutation() *UserPermMutation {
	return upuo.mutation
}

// ClearPerm clears the "perm" edge to the Perm entity.
func (upuo *UserPermUpdateOne) ClearPerm() *UserPermUpdateOne {
	upuo.mutation.ClearPerm()
	return upuo
}

// Where appends a list predicates to the UserPermUpdate builder.
func (upuo *UserPermUpdateOne) Where(ps ...predicate.UserPerm) *UserPermUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPermUpdateOne) Select(field string, fields ...string) *UserPermUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPerm entity.
func (upuo *UserPermUpdateOne) Save(ctx context.Context) (*UserPerm, error) {
	upuo.defaults()
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPermUpdateOne) SaveX(ctx context.Context) *UserPerm {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPermUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPermUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserPermUpdateOne) defaults() {
	if _, ok := upuo.mutation.UpdatedAt(); !ok {
		v := userperm.UpdateDefaultUpdatedAt()
		upuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPermUpdateOne) check() error {
	if v, ok := upuo.mutation.UserID(); ok {
		if err := userperm.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserPerm.user_id": %w`, err)}
		}
	}
	if upuo.mutation.PermCleared() && len(upuo.mutation.PermIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPerm.perm"`)
	}
	return nil
}

func (upuo *UserPermUpdateOne) sqlSave(ctx context.Context) (_node *UserPerm, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userperm.Table, userperm.Columns, sqlgraph.NewFieldSpec(userperm.FieldID, field.TypeUUID))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPerm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userperm.FieldID)
		for _, f := range fields {
			if !userperm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userperm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.UserID(); ok {
		_spec.SetField(userperm.FieldUserID, field.TypeString, value)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userperm.FieldUpdatedAt, field.TypeTime, value)
	}
	if upuo.mutation.PermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userperm.PermTable,
			Columns: []string{userperm.PermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.PermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userperm.PermTable,
			Columns: []string{userperm.PermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(perm.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPerm{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userperm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
