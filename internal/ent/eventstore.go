// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/eventstore"
)

// EventStore is the model entity for the EventStore schema.
type EventStore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// AggregateID holds the value of the "aggregate_id" field.
	AggregateID string `json:"aggregate_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload map[string]interface{} `json:"payload,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventStore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventstore.FieldPayload:
			values[i] = new([]byte)
		case eventstore.FieldID:
			values[i] = new(sql.NullInt64)
		case eventstore.FieldEventID, eventstore.FieldAggregateID, eventstore.FieldEventType:
			values[i] = new(sql.NullString)
		case eventstore.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventStore fields.
func (es *EventStore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventstore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			es.ID = int(value.Int64)
		case eventstore.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				es.EventID = value.String
			}
		case eventstore.FieldAggregateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_id", values[i])
			} else if value.Valid {
				es.AggregateID = value.String
			}
		case eventstore.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				es.EventType = value.String
			}
		case eventstore.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &es.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case eventstore.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				es.CreatedAt = value.Time
			}
		default:
			es.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventStore.
// This includes values selected through modifiers, order, etc.
func (es *EventStore) Value(name string) (ent.Value, error) {
	return es.selectValues.Get(name)
}

// Update returns a builder for updating this EventStore.
// Note that you need to call EventStore.Unwrap() before calling this method if this EventStore
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *EventStore) Update() *EventStoreUpdateOne {
	return NewEventStoreClient(es.config).UpdateOne(es)
}

// Unwrap unwraps the EventStore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *EventStore) Unwrap() *EventStore {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventStore is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *EventStore) String() string {
	var builder strings.Builder
	builder.WriteString("EventStore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("event_id=")
	builder.WriteString(es.EventID)
	builder.WriteString(", ")
	builder.WriteString("aggregate_id=")
	builder.WriteString(es.AggregateID)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(es.EventType)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", es.Payload))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(es.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventStores is a parsable slice of EventStore.
type EventStores []*EventStore
