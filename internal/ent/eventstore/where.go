// Code generated by ent, DO NOT EDIT.

package eventstore

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EventStore {
	return predicate.EventStore(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EventStore {
	return predicate.EventStore(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EventStore {
	return predicate.EventStore(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EventStore {
	return predicate.EventStore(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EventStore {
	return predicate.EventStore(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EventStore {
	return predicate.EventStore(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EventStore {
	return predicate.EventStore(sql.FieldLTE(FieldID, id))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldEventID, v))
}

// AggregateID applies equality check predicate on the "aggregate_id" field. It's identical to AggregateIDEQ.
func AggregateID(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldAggregateID, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldEventType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldCreatedAt, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.EventStore {
	return predicate.EventStore(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.EventStore {
	return predicate.EventStore(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldContainsFold(FieldEventID, v))
}

// AggregateIDEQ applies the EQ predicate on the "aggregate_id" field.
func AggregateIDEQ(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldAggregateID, v))
}

// AggregateIDNEQ applies the NEQ predicate on the "aggregate_id" field.
func AggregateIDNEQ(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldNEQ(FieldAggregateID, v))
}

// AggregateIDIn applies the In predicate on the "aggregate_id" field.
func AggregateIDIn(vs ...string) predicate.EventStore {
	return predicate.EventStore(sql.FieldIn(FieldAggregateID, vs...))
}

// AggregateIDNotIn applies the NotIn predicate on the "aggregate_id" field.
func AggregateIDNotIn(vs ...string) predicate.EventStore {
	return predicate.EventStore(sql.FieldNotIn(FieldAggregateID, vs...))
}

// AggregateIDGT applies the GT predicate on the "aggregate_id" field.
func AggregateIDGT(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldGT(FieldAggregateID, v))
}

// AggregateIDGTE applies the GTE predicate on the "aggregate_id" field.
func AggregateIDGTE(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldGTE(FieldAggregateID, v))
}

// AggregateIDLT applies the LT predicate on the "aggregate_id" field.
func AggregateIDLT(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldLT(FieldAggregateID, v))
}

// AggregateIDLTE applies the LTE predicate on the "aggregate_id" field.
func AggregateIDLTE(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldLTE(FieldAggregateID, v))
}

// AggregateIDContains applies the Contains predicate on the "aggregate_id" field.
func AggregateIDContains(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldContains(FieldAggregateID, v))
}

// AggregateIDHasPrefix applies the HasPrefix predicate on the "aggregate_id" field.
func AggregateIDHasPrefix(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldHasPrefix(FieldAggregateID, v))
}

// AggregateIDHasSuffix applies the HasSuffix predicate on the "aggregate_id" field.
func AggregateIDHasSuffix(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldHasSuffix(FieldAggregateID, v))
}

// AggregateIDEqualFold applies the EqualFold predicate on the "aggregate_id" field.
func AggregateIDEqualFold(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEqualFold(FieldAggregateID, v))
}

// AggregateIDContainsFold applies the ContainsFold predicate on the "aggregate_id" field.
func AggregateIDContainsFold(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldContainsFold(FieldAggregateID, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.EventStore {
	return predicate.EventStore(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.EventStore {
	return predicate.EventStore(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.EventStore {
	return predicate.EventStore(sql.FieldContainsFold(FieldEventType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EventStore {
	return predicate.EventStore(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventStore) predicate.EventStore {
	return predicate.EventStore(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventStore) predicate.EventStore {
	return predicate.EventStore(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventStore) predicate.EventStore {
	return predicate.EventStore(sql.NotPredicates(p))
}
