// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/eventstore"
)

// EventStoreCreate is the builder for creating a EventStore entity.
type EventStoreCreate struct {
	config
	mutation *EventStoreMutation
	hooks    []Hook
}

// SetEventID sets the "event_id" field.
func (esc *EventStoreCreate) SetEventID(s string) *EventStoreCreate {
	esc.mutation.SetEventID(s)
	return esc
}

// SetAggregateID sets the "aggregate_id" field.
func (esc *EventStoreCreate) SetAggregateID(s string) *EventStoreCreate {
	esc.mutation.SetAggregateID(s)
	return esc
}

// SetEventType sets the "event_type" field.
func (esc *EventStoreCreate) SetEventType(s string) *EventStoreCreate {
	esc.mutation.SetEventType(s)
	return esc
}

// SetPayload sets the "payload" field.
func (esc *EventStoreCreate) SetPayload(m map[string]interface{}) *EventStoreCreate {
	esc.mutation.SetPayload(m)
	return esc
}

// SetCreatedAt sets the "created_at" field.
func (esc *EventStoreCreate) SetCreatedAt(t time.Time) *EventStoreCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// Mutation returns the EventStoreMutation object of the builder.
func (esc *EventStoreCreate) Mutation() *EventStoreMutation {
	return esc.mutation
}

// Save creates the EventStore in the database.
func (esc *EventStoreCreate) Save(ctx context.Context) (*EventStore, error) {
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EventStoreCreate) SaveX(ctx context.Context) *EventStore {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EventStoreCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EventStoreCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *EventStoreCreate) check() error {
	if _, ok := esc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "EventStore.event_id"`)}
	}
	if _, ok := esc.mutation.AggregateID(); !ok {
		return &ValidationError{Name: "aggregate_id", err: errors.New(`ent: missing required field "EventStore.aggregate_id"`)}
	}
	if _, ok := esc.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "EventStore.event_type"`)}
	}
	if _, ok := esc.mutation.Payload(); !ok {
		return &ValidationError{Name: "payload", err: errors.New(`ent: missing required field "EventStore.payload"`)}
	}
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EventStore.created_at"`)}
	}
	return nil
}

func (esc *EventStoreCreate) sqlSave(ctx context.Context) (*EventStore, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *EventStoreCreate) createSpec() (*EventStore, *sqlgraph.CreateSpec) {
	var (
		_node = &EventStore{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(eventstore.Table, sqlgraph.NewFieldSpec(eventstore.FieldID, field.TypeInt))
	)
	if value, ok := esc.mutation.EventID(); ok {
		_spec.SetField(eventstore.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := esc.mutation.AggregateID(); ok {
		_spec.SetField(eventstore.FieldAggregateID, field.TypeString, value)
		_node.AggregateID = value
	}
	if value, ok := esc.mutation.EventType(); ok {
		_spec.SetField(eventstore.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := esc.mutation.Payload(); ok {
		_spec.SetField(eventstore.FieldPayload, field.TypeJSON, value)
		_node.Payload = value
	}
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.SetField(eventstore.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// EventStoreCreateBulk is the builder for creating many EventStore entities in bulk.
type EventStoreCreateBulk struct {
	config
	err      error
	builders []*EventStoreCreate
}

// Save creates the EventStore entities in the database.
func (escb *EventStoreCreateBulk) Save(ctx context.Context) ([]*EventStore, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EventStore, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventStoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EventStoreCreateBulk) SaveX(ctx context.Context) []*EventStore {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EventStoreCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EventStoreCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}
