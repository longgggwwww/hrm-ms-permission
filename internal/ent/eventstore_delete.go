// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/eventstore"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/predicate"
)

// EventStoreDelete is the builder for deleting a EventStore entity.
type EventStoreDelete struct {
	config
	hooks    []Hook
	mutation *EventStoreMutation
}

// Where appends a list predicates to the EventStoreDelete builder.
func (esd *EventStoreDelete) Where(ps ...predicate.EventStore) *EventStoreDelete {
	esd.mutation.Where(ps...)
	return esd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (esd *EventStoreDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, esd.sqlExec, esd.mutation, esd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (esd *EventStoreDelete) ExecX(ctx context.Context) int {
	n, err := esd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (esd *EventStoreDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(eventstore.Table, sqlgraph.NewFieldSpec(eventstore.FieldID, field.TypeInt))
	if ps := esd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, esd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	esd.mutation.done = true
	return affected, err
}

// EventStoreDeleteOne is the builder for deleting a single EventStore entity.
type EventStoreDeleteOne struct {
	esd *EventStoreDelete
}

// Where appends a list predicates to the EventStoreDelete builder.
func (esdo *EventStoreDeleteOne) Where(ps ...predicate.EventStore) *EventStoreDeleteOne {
	esdo.esd.mutation.Where(ps...)
	return esdo
}

// Exec executes the deletion query.
func (esdo *EventStoreDeleteOne) Exec(ctx context.Context) error {
	n, err := esdo.esd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{eventstore.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (esdo *EventStoreDeleteOne) ExecX(ctx context.Context) {
	if err := esdo.Exec(ctx); err != nil {
		panic(err)
	}
}
