// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/eventstore"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/predicate"
)

// EventStoreUpdate is the builder for updating EventStore entities.
type EventStoreUpdate struct {
	config
	hooks    []Hook
	mutation *EventStoreMutation
}

// Where appends a list predicates to the EventStoreUpdate builder.
func (esu *EventStoreUpdate) Where(ps ...predicate.EventStore) *EventStoreUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetEventID sets the "event_id" field.
func (esu *EventStoreUpdate) SetEventID(s string) *EventStoreUpdate {
	esu.mutation.SetEventID(s)
	return esu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (esu *EventStoreUpdate) SetNillableEventID(s *string) *EventStoreUpdate {
	if s != nil {
		esu.SetEventID(*s)
	}
	return esu
}

// SetAggregateID sets the "aggregate_id" field.
func (esu *EventStoreUpdate) SetAggregateID(s string) *EventStoreUpdate {
	esu.mutation.SetAggregateID(s)
	return esu
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (esu *EventStoreUpdate) SetNillableAggregateID(s *string) *EventStoreUpdate {
	if s != nil {
		esu.SetAggregateID(*s)
	}
	return esu
}

// SetEventType sets the "event_type" field.
func (esu *EventStoreUpdate) SetEventType(s string) *EventStoreUpdate {
	esu.mutation.SetEventType(s)
	return esu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (esu *EventStoreUpdate) SetNillableEventType(s *string) *EventStoreUpdate {
	if s != nil {
		esu.SetEventType(*s)
	}
	return esu
}

// SetPayload sets the "payload" field.
func (esu *EventStoreUpdate) SetPayload(m map[string]interface{}) *EventStoreUpdate {
	esu.mutation.SetPayload(m)
	return esu
}

// SetCreatedAt sets the "created_at" field.
func (esu *EventStoreUpdate) SetCreatedAt(t time.Time) *EventStoreUpdate {
	esu.mutation.SetCreatedAt(t)
	return esu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esu *EventStoreUpdate) SetNillableCreatedAt(t *time.Time) *EventStoreUpdate {
	if t != nil {
		esu.SetCreatedAt(*t)
	}
	return esu
}

// Mutation returns the EventStoreMutation object of the builder.
func (esu *EventStoreUpdate) Mutation() *EventStoreMutation {
	return esu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EventStoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, esu.sqlSave, esu.mutation, esu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EventStoreUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EventStoreUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EventStoreUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (esu *EventStoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventstore.Table, eventstore.Columns, sqlgraph.NewFieldSpec(eventstore.FieldID, field.TypeInt))
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.EventID(); ok {
		_spec.SetField(eventstore.FieldEventID, field.TypeString, value)
	}
	if value, ok := esu.mutation.AggregateID(); ok {
		_spec.SetField(eventstore.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := esu.mutation.EventType(); ok {
		_spec.SetField(eventstore.FieldEventType, field.TypeString, value)
	}
	if value, ok := esu.mutation.Payload(); ok {
		_spec.SetField(eventstore.FieldPayload, field.TypeJSON, value)
	}
	if value, ok := esu.mutation.CreatedAt(); ok {
		_spec.SetField(eventstore.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventstore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	esu.mutation.done = true
	return n, nil
}

// EventStoreUpdateOne is the builder for updating a single EventStore entity.
type EventStoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventStoreMutation
}

// SetEventID sets the "event_id" field.
func (esuo *EventStoreUpdateOne) SetEventID(s string) *EventStoreUpdateOne {
	esuo.mutation.SetEventID(s)
	return esuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (esuo *EventStoreUpdateOne) SetNillableEventID(s *string) *EventStoreUpdateOne {
	if s != nil {
		esuo.SetEventID(*s)
	}
	return esuo
}

// SetAggregateID sets the "aggregate_id" field.
func (esuo *EventStoreUpdateOne) SetAggregateID(s string) *EventStoreUpdateOne {
	esuo.mutation.SetAggregateID(s)
	return esuo
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (esuo *EventStoreUpdateOne) SetNillableAggregateID(s *string) *EventStoreUpdateOne {
	if s != nil {
		esuo.SetAggregateID(*s)
	}
	return esuo
}

// SetEventType sets the "event_type" field.
func (esuo *EventStoreUpdateOne) SetEventType(s string) *EventStoreUpdateOne {
	esuo.mutation.SetEventType(s)
	return esuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (esuo *EventStoreUpdateOne) SetNillableEventType(s *string) *EventStoreUpdateOne {
	if s != nil {
		esuo.SetEventType(*s)
	}
	return esuo
}

// SetPayload sets the "payload" field.
func (esuo *EventStoreUpdateOne) SetPayload(m map[string]interface{}) *EventStoreUpdateOne {
	esuo.mutation.SetPayload(m)
	return esuo
}

// SetCreatedAt sets the "created_at" field.
func (esuo *EventStoreUpdateOne) SetCreatedAt(t time.Time) *EventStoreUpdateOne {
	esuo.mutation.SetCreatedAt(t)
	return esuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esuo *EventStoreUpdateOne) SetNillableCreatedAt(t *time.Time) *EventStoreUpdateOne {
	if t != nil {
		esuo.SetCreatedAt(*t)
	}
	return esuo
}

// Mutation returns the EventStoreMutation object of the builder.
func (esuo *EventStoreUpdateOne) Mutation() *EventStoreMutation {
	return esuo.mutation
}

// Where appends a list predicates to the EventStoreUpdate builder.
func (esuo *EventStoreUpdateOne) Where(ps ...predicate.EventStore) *EventStoreUpdateOne {
	esuo.mutation.Where(ps...)
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EventStoreUpdateOne) Select(field string, fields ...string) *EventStoreUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EventStore entity.
func (esuo *EventStoreUpdateOne) Save(ctx context.Context) (*EventStore, error) {
	return withHooks(ctx, esuo.sqlSave, esuo.mutation, esuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EventStoreUpdateOne) SaveX(ctx context.Context) *EventStore {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EventStoreUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EventStoreUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (esuo *EventStoreUpdateOne) sqlSave(ctx context.Context) (_node *EventStore, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventstore.Table, eventstore.Columns, sqlgraph.NewFieldSpec(eventstore.FieldID, field.TypeInt))
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventStore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventstore.FieldID)
		for _, f := range fields {
			if !eventstore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventstore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.EventID(); ok {
		_spec.SetField(eventstore.FieldEventID, field.TypeString, value)
	}
	if value, ok := esuo.mutation.AggregateID(); ok {
		_spec.SetField(eventstore.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := esuo.mutation.EventType(); ok {
		_spec.SetField(eventstore.FieldEventType, field.TypeString, value)
	}
	if value, ok := esuo.mutation.Payload(); ok {
		_spec.SetField(eventstore.FieldPayload, field.TypeJSON, value)
	}
	if value, ok := esuo.mutation.CreatedAt(); ok {
		_spec.SetField(eventstore.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &EventStore{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventstore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esuo.mutation.done = true
	return _node, nil
}
