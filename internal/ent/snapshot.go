// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/snapshot"
)

// Snapshot is the model entity for the Snapshot schema.
type Snapshot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SnapshotID holds the value of the "snapshot_id" field.
	SnapshotID string `json:"snapshot_id,omitempty"`
	// AggregateID holds the value of the "aggregate_id" field.
	AggregateID string `json:"aggregate_id,omitempty"`
	// State holds the value of the "state" field.
	State map[string]interface{} `json:"state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Snapshot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case snapshot.FieldState:
			values[i] = new([]byte)
		case snapshot.FieldID:
			values[i] = new(sql.NullInt64)
		case snapshot.FieldSnapshotID, snapshot.FieldAggregateID:
			values[i] = new(sql.NullString)
		case snapshot.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Snapshot fields.
func (s *Snapshot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case snapshot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case snapshot.FieldSnapshotID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snapshot_id", values[i])
			} else if value.Valid {
				s.SnapshotID = value.String
			}
		case snapshot.FieldAggregateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_id", values[i])
			} else if value.Valid {
				s.AggregateID = value.String
			}
		case snapshot.FieldState:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.State); err != nil {
					return fmt.Errorf("unmarshal field state: %w", err)
				}
			}
		case snapshot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Snapshot.
// This includes values selected through modifiers, order, etc.
func (s *Snapshot) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Snapshot.
// Note that you need to call Snapshot.Unwrap() before calling this method if this Snapshot
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Snapshot) Update() *SnapshotUpdateOne {
	return NewSnapshotClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Snapshot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Snapshot) Unwrap() *Snapshot {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Snapshot is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Snapshot) String() string {
	var builder strings.Builder
	builder.WriteString("Snapshot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("snapshot_id=")
	builder.WriteString(s.SnapshotID)
	builder.WriteString(", ")
	builder.WriteString("aggregate_id=")
	builder.WriteString(s.AggregateID)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", s.State))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Snapshots is a parsable slice of Snapshot.
type Snapshots []*Snapshot
