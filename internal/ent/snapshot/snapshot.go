// Code generated by ent, DO NOT EDIT.

package snapshot

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the snapshot type in the database.
	Label = "snapshot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSnapshotID holds the string denoting the snapshot_id field in the database.
	FieldSnapshotID = "snapshot_id"
	// FieldAggregateID holds the string denoting the aggregate_id field in the database.
	FieldAggregateID = "aggregate_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the snapshot in the database.
	Table = "snapshots"
)

// Columns holds all SQL columns for snapshot fields.
var Columns = []string{
	FieldID,
	FieldSnapshotID,
	FieldAggregateID,
	FieldState,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Snapshot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySnapshotID orders the results by the snapshot_id field.
func BySnapshotID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSnapshotID, opts...).ToFunc()
}

// ByAggregateID orders the results by the aggregate_id field.
func ByAggregateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregateID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
