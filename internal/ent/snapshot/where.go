// Code generated by ent, DO NOT EDIT.

package snapshot

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLTE(FieldID, id))
}

// SnapshotID applies equality check predicate on the "snapshot_id" field. It's identical to SnapshotIDEQ.
func SnapshotID(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldSnapshotID, v))
}

// AggregateID applies equality check predicate on the "aggregate_id" field. It's identical to AggregateIDEQ.
func AggregateID(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldAggregateID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldCreatedAt, v))
}

// SnapshotIDEQ applies the EQ predicate on the "snapshot_id" field.
func SnapshotIDEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldSnapshotID, v))
}

// SnapshotIDNEQ applies the NEQ predicate on the "snapshot_id" field.
func SnapshotIDNEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNEQ(FieldSnapshotID, v))
}

// SnapshotIDIn applies the In predicate on the "snapshot_id" field.
func SnapshotIDIn(vs ...string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldIn(FieldSnapshotID, vs...))
}

// SnapshotIDNotIn applies the NotIn predicate on the "snapshot_id" field.
func SnapshotIDNotIn(vs ...string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNotIn(FieldSnapshotID, vs...))
}

// SnapshotIDGT applies the GT predicate on the "snapshot_id" field.
func SnapshotIDGT(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGT(FieldSnapshotID, v))
}

// SnapshotIDGTE applies the GTE predicate on the "snapshot_id" field.
func SnapshotIDGTE(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGTE(FieldSnapshotID, v))
}

// SnapshotIDLT applies the LT predicate on the "snapshot_id" field.
func SnapshotIDLT(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLT(FieldSnapshotID, v))
}

// SnapshotIDLTE applies the LTE predicate on the "snapshot_id" field.
func SnapshotIDLTE(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLTE(FieldSnapshotID, v))
}

// SnapshotIDContains applies the Contains predicate on the "snapshot_id" field.
func SnapshotIDContains(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldContains(FieldSnapshotID, v))
}

// SnapshotIDHasPrefix applies the HasPrefix predicate on the "snapshot_id" field.
func SnapshotIDHasPrefix(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldHasPrefix(FieldSnapshotID, v))
}

// SnapshotIDHasSuffix applies the HasSuffix predicate on the "snapshot_id" field.
func SnapshotIDHasSuffix(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldHasSuffix(FieldSnapshotID, v))
}

// SnapshotIDEqualFold applies the EqualFold predicate on the "snapshot_id" field.
func SnapshotIDEqualFold(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEqualFold(FieldSnapshotID, v))
}

// SnapshotIDContainsFold applies the ContainsFold predicate on the "snapshot_id" field.
func SnapshotIDContainsFold(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldContainsFold(FieldSnapshotID, v))
}

// AggregateIDEQ applies the EQ predicate on the "aggregate_id" field.
func AggregateIDEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldAggregateID, v))
}

// AggregateIDNEQ applies the NEQ predicate on the "aggregate_id" field.
func AggregateIDNEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNEQ(FieldAggregateID, v))
}

// AggregateIDIn applies the In predicate on the "aggregate_id" field.
func AggregateIDIn(vs ...string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldIn(FieldAggregateID, vs...))
}

// AggregateIDNotIn applies the NotIn predicate on the "aggregate_id" field.
func AggregateIDNotIn(vs ...string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNotIn(FieldAggregateID, vs...))
}

// AggregateIDGT applies the GT predicate on the "aggregate_id" field.
func AggregateIDGT(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGT(FieldAggregateID, v))
}

// AggregateIDGTE applies the GTE predicate on the "aggregate_id" field.
func AggregateIDGTE(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGTE(FieldAggregateID, v))
}

// AggregateIDLT applies the LT predicate on the "aggregate_id" field.
func AggregateIDLT(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLT(FieldAggregateID, v))
}

// AggregateIDLTE applies the LTE predicate on the "aggregate_id" field.
func AggregateIDLTE(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLTE(FieldAggregateID, v))
}

// AggregateIDContains applies the Contains predicate on the "aggregate_id" field.
func AggregateIDContains(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldContains(FieldAggregateID, v))
}

// AggregateIDHasPrefix applies the HasPrefix predicate on the "aggregate_id" field.
func AggregateIDHasPrefix(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldHasPrefix(FieldAggregateID, v))
}

// AggregateIDHasSuffix applies the HasSuffix predicate on the "aggregate_id" field.
func AggregateIDHasSuffix(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldHasSuffix(FieldAggregateID, v))
}

// AggregateIDEqualFold applies the EqualFold predicate on the "aggregate_id" field.
func AggregateIDEqualFold(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEqualFold(FieldAggregateID, v))
}

// AggregateIDContainsFold applies the ContainsFold predicate on the "aggregate_id" field.
func AggregateIDContainsFold(v string) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldContainsFold(FieldAggregateID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Snapshot {
	return predicate.Snapshot(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Snapshot) predicate.Snapshot {
	return predicate.Snapshot(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Snapshot) predicate.Snapshot {
	return predicate.Snapshot(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Snapshot) predicate.Snapshot {
	return predicate.Snapshot(sql.NotPredicates(p))
}
