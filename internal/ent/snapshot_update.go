// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/predicate"
	"github.com/longgggwww/hrm-ms-permission/internal/ent/snapshot"
)

// SnapshotUpdate is the builder for updating Snapshot entities.
type SnapshotUpdate struct {
	config
	hooks    []Hook
	mutation *SnapshotMutation
}

// Where appends a list predicates to the SnapshotUpdate builder.
func (su *SnapshotUpdate) Where(ps ...predicate.Snapshot) *SnapshotUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSnapshotID sets the "snapshot_id" field.
func (su *SnapshotUpdate) SetSnapshotID(s string) *SnapshotUpdate {
	su.mutation.SetSnapshotID(s)
	return su
}

// SetNillableSnapshotID sets the "snapshot_id" field if the given value is not nil.
func (su *SnapshotUpdate) SetNillableSnapshotID(s *string) *SnapshotUpdate {
	if s != nil {
		su.SetSnapshotID(*s)
	}
	return su
}

// SetAggregateID sets the "aggregate_id" field.
func (su *SnapshotUpdate) SetAggregateID(s string) *SnapshotUpdate {
	su.mutation.SetAggregateID(s)
	return su
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (su *SnapshotUpdate) SetNillableAggregateID(s *string) *SnapshotUpdate {
	if s != nil {
		su.SetAggregateID(*s)
	}
	return su
}

// SetState sets the "state" field.
func (su *SnapshotUpdate) SetState(m map[string]interface{}) *SnapshotUpdate {
	su.mutation.SetState(m)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SnapshotUpdate) SetCreatedAt(t time.Time) *SnapshotUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SnapshotUpdate) SetNillableCreatedAt(t *time.Time) *SnapshotUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// Mutation returns the SnapshotMutation object of the builder.
func (su *SnapshotUpdate) Mutation() *SnapshotMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SnapshotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SnapshotUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SnapshotUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SnapshotUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SnapshotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(snapshot.Table, snapshot.Columns, sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SnapshotID(); ok {
		_spec.SetField(snapshot.FieldSnapshotID, field.TypeString, value)
	}
	if value, ok := su.mutation.AggregateID(); ok {
		_spec.SetField(snapshot.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := su.mutation.State(); ok {
		_spec.SetField(snapshot.FieldState, field.TypeJSON, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(snapshot.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SnapshotUpdateOne is the builder for updating a single Snapshot entity.
type SnapshotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SnapshotMutation
}

// SetSnapshotID sets the "snapshot_id" field.
func (suo *SnapshotUpdateOne) SetSnapshotID(s string) *SnapshotUpdateOne {
	suo.mutation.SetSnapshotID(s)
	return suo
}

// SetNillableSnapshotID sets the "snapshot_id" field if the given value is not nil.
func (suo *SnapshotUpdateOne) SetNillableSnapshotID(s *string) *SnapshotUpdateOne {
	if s != nil {
		suo.SetSnapshotID(*s)
	}
	return suo
}

// SetAggregateID sets the "aggregate_id" field.
func (suo *SnapshotUpdateOne) SetAggregateID(s string) *SnapshotUpdateOne {
	suo.mutation.SetAggregateID(s)
	return suo
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (suo *SnapshotUpdateOne) SetNillableAggregateID(s *string) *SnapshotUpdateOne {
	if s != nil {
		suo.SetAggregateID(*s)
	}
	return suo
}

// SetState sets the "state" field.
func (suo *SnapshotUpdateOne) SetState(m map[string]interface{}) *SnapshotUpdateOne {
	suo.mutation.SetState(m)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SnapshotUpdateOne) SetCreatedAt(t time.Time) *SnapshotUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SnapshotUpdateOne) SetNillableCreatedAt(t *time.Time) *SnapshotUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// Mutation returns the SnapshotMutation object of the builder.
func (suo *SnapshotUpdateOne) Mutation() *SnapshotMutation {
	return suo.mutation
}

// Where appends a list predicates to the SnapshotUpdate builder.
func (suo *SnapshotUpdateOne) Where(ps ...predicate.Snapshot) *SnapshotUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SnapshotUpdateOne) Select(field string, fields ...string) *SnapshotUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Snapshot entity.
func (suo *SnapshotUpdateOne) Save(ctx context.Context) (*Snapshot, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SnapshotUpdateOne) SaveX(ctx context.Context) *Snapshot {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SnapshotUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SnapshotUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SnapshotUpdateOne) sqlSave(ctx context.Context) (_node *Snapshot, err error) {
	_spec := sqlgraph.NewUpdateSpec(snapshot.Table, snapshot.Columns, sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Snapshot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, snapshot.FieldID)
		for _, f := range fields {
			if !snapshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != snapshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SnapshotID(); ok {
		_spec.SetField(snapshot.FieldSnapshotID, field.TypeString, value)
	}
	if value, ok := suo.mutation.AggregateID(); ok {
		_spec.SetField(snapshot.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := suo.mutation.State(); ok {
		_spec.SetField(snapshot.FieldState, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(snapshot.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Snapshot{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
